{"1.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.5","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":null,"docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/1.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"1.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"b796944d343b5cf4099e99e7b4b5deed9a972e0236f58abbc7a79161ff9b9cfa","md5":"b584da29b598048fb5eefcd2bd21a035","sha256":"c036aedb80394439523a1cd8aa6cc0a1a3d897095232c2d03447c10b0f3ac43a"},"downloads":-1,"filename":"ihatemoney-1.0.tar.gz","has_sig":false,"md5_digest":"b584da29b598048fb5eefcd2bd21a035","packagetype":"sdist","python_version":"source","requires_python":null,"size":308271,"upload_time":"2017-06-20T21:00:01","upload_time_iso_8601":"2017-06-20T21:00:01.374723Z","url":"https://files.pythonhosted.org/packages/b7/96/944d343b5cf4099e99e7b4b5deed9a972e0236f58abbc7a79161ff9b9cfa/ihatemoney-1.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"2.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":null,"docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/2.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"2.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"54a73c86e49b1a0f4ee42c51a87d1853602adeb6db576576da07bf302fdcc897","md5":"dc2d2b6b9b41e8dbadf697a168885890","sha256":"0367edd7e36577096efe9a2b92f507efef74e7fef1c2b11e18ef49ee569ffc4d"},"downloads":-1,"filename":"ihatemoney-2.0.tar.gz","has_sig":false,"md5_digest":"dc2d2b6b9b41e8dbadf697a168885890","packagetype":"sdist","python_version":"source","requires_python":null,"size":312990,"upload_time":"2017-12-27T18:09:38","upload_time_iso_8601":"2017-12-27T18:09:38.922571Z","url":"https://files.pythonhosted.org/packages/54/a7/3c86e49b1a0f4ee42c51a87d1853602adeb6db576576da07bf302fdcc897/ihatemoney-2.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"2.1":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":null,"docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/2.1/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"2.1","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"1822a63a2990dd75c8a1ec0c2acec9f1660a63c37d4942a9639985bde4184e95","md5":"741b085b185f3e06b2ebfc9d235c27f3","sha256":"21ccb2b3ae84d3c8889e9b267bde0ba1d83a6131d09abda72f89bb4fdb0f706f"},"downloads":-1,"filename":"ihatemoney-2.1.tar.gz","has_sig":false,"md5_digest":"741b085b185f3e06b2ebfc9d235c27f3","packagetype":"sdist","python_version":"source","requires_python":null,"size":317343,"upload_time":"2018-02-16T22:18:47","upload_time_iso_8601":"2018-02-16T22:18:47.818941Z","url":"https://files.pythonhosted.org/packages/18/22/a63a2990dd75c8a1ec0c2acec9f1660a63c37d4942a9639985bde4184e95/ihatemoney-2.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"3.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/3.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"3.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"36ad3cc5d5bd60bdb66f4db44eab8e7b6c81da0ecac0bba623719413a5d394a5","md5":"5f21b32b18f72042e458663413322176","sha256":"5f62a3186c59f61342d0fd6999b29372e6b14c1ee61fb482984d3a8fdb33c928"},"downloads":-1,"filename":"ihatemoney-3.0.tar.gz","has_sig":false,"md5_digest":"5f21b32b18f72042e458663413322176","packagetype":"sdist","python_version":"source","requires_python":null,"size":318609,"upload_time":"2018-11-25T18:52:12","upload_time_iso_8601":"2018-11-25T18:52:12.459028Z","url":"https://files.pythonhosted.org/packages/36/ad/3cc5d5bd60bdb66f4db44eab8e7b6c81da0ecac0bba623719413a5d394a5/ihatemoney-3.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"4.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/4.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"4.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"d97856af81a788a91d7e387c7b577fc6752146798250d18ece7dc7fa2349584b","md5":"3e30d7f6531c8830fa053257e8f79759","sha256":"0288aa6f075cd683ab55908f05c22239a3b553d5a0059f15d4994d2d32601be1"},"downloads":-1,"filename":"ihatemoney-4.0.tar.gz","has_sig":false,"md5_digest":"3e30d7f6531c8830fa053257e8f79759","packagetype":"sdist","python_version":"source","requires_python":null,"size":321645,"upload_time":"2019-01-24T12:42:24","upload_time_iso_8601":"2019-01-24T12:42:24.626459Z","url":"https://files.pythonhosted.org/packages/d9/78/56af81a788a91d7e387c7b577fc6752146798250d18ece7dc7fa2349584b/ihatemoney-4.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"4.1":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/4.1/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"4.1","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"9daaed29f19ee8fbbe7cb0f64591018073f6361c4bd0ed444943e5c3462b3d7e","md5":"400d39188b5332912c371d9723eb8dc7","sha256":"78b3d056f9e39eb44baf6fb76f11e6fdd3ae0c9b44be34598d6bfdfbb024805c"},"downloads":-1,"filename":"ihatemoney-4.1.tar.gz","has_sig":false,"md5_digest":"400d39188b5332912c371d9723eb8dc7","packagetype":"sdist","python_version":"source","requires_python":null,"size":326743,"upload_time":"2019-09-08T17:55:20","upload_time_iso_8601":"2019-09-08T17:55:20.202780Z","url":"https://files.pythonhosted.org/packages/9d/aa/ed29f19ee8fbbe7cb0f64591018073f6361c4bd0ed444943e5c3462b3d7e/ihatemoney-4.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"4.1.2":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/4.1.2/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"4.1.2","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"dfacb6f8e1bff74de59f60c524238f0e33068cdfe098355547ccefb1ab440213","md5":"7dda358f780f9c8fef2939d8723e76e2","sha256":"e593527069465efe7ec71ab231b6ea1e014f4881a96146a69060b24afc962b2a"},"downloads":-1,"filename":"ihatemoney-4.1.2.tar.gz","has_sig":false,"md5_digest":"7dda358f780f9c8fef2939d8723e76e2","packagetype":"sdist","python_version":"source","requires_python":null,"size":329035,"upload_time":"2019-09-18T19:51:19","upload_time_iso_8601":"2019-09-18T19:51:19.520718Z","url":"https://files.pythonhosted.org/packages/df/ac/b6f8e1bff74de59f60c524238f0e33068cdfe098355547ccefb1ab440213/ihatemoney-4.1.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"4.1.3":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/4.1.3/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"4.1.3","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"48e0b920bc2ece10b5e387d5e6b701b21c6037653ad500f1ea7ed0615d72ffbe","md5":"fc634f4fe9461175a18ed8b7d1e37826","sha256":"843434cd4bad6c17905db653f8f60aa5978555089e961899dde7114d487de02d"},"downloads":-1,"filename":"ihatemoney-4.1.3.tar.gz","has_sig":false,"md5_digest":"fc634f4fe9461175a18ed8b7d1e37826","packagetype":"sdist","python_version":"source","requires_python":null,"size":327602,"upload_time":"2019-09-18T20:11:14","upload_time_iso_8601":"2019-09-18T20:11:14.586107Z","url":"https://files.pythonhosted.org/packages/48/e0/b920bc2ece10b5e387d5e6b701b21c6037653ad500f1ea7ed0615d72ffbe/ihatemoney-4.1.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"4.1.4":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/4.1.4/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"4.1.4","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"da6854e2ebfcfef7ee743c562a096b8bc4842eec4827897fbf85fd02028a72ce","md5":"617080ae43aafba368fee9bdbd3ebb12","sha256":"febe347fe0d3cf8ec3b8475bde9716774421a5f56b1cac704398c51cf4490847"},"downloads":-1,"filename":"ihatemoney-4.1.4.tar.gz","has_sig":false,"md5_digest":"617080ae43aafba368fee9bdbd3ebb12","packagetype":"sdist","python_version":"source","requires_python":null,"size":355633,"upload_time":"2020-06-15T20:57:37","upload_time_iso_8601":"2020-06-15T20:57:37.680886Z","url":"https://files.pythonhosted.org/packages/da/68/54e2ebfcfef7ee743c562a096b8bc4842eec4827897fbf85fd02028a72ce/ihatemoney-4.1.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2020-15120","GHSA-67j9-c52g-w2q9"],"details":"In \"I hate money\" before version 4.1.5, an authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code. With the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated. This is fixed in version 4.1.5.","fixed_in":["4.1.5"],"id":"PYSEC-2020-264","link":"https://osv.dev/vulnerability/PYSEC-2020-264","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-15120"],"details":"### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/ihatemoney/models.py b/ihatemoney/models.py\nindex fe7b519..5691c75 100644\n--- a/ihatemoney/models.py\n+++ b/ihatemoney/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https://ihatemoney.readthedocs.io/en/latest/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `/api/projects/<project>/members/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http://$SERVER/attackerProject/\n\n2) Editing a member through the web interface at `/<project>/members/<personID>/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http://$SERVER/attackerProject/members/42/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `/api/projects/<project>/members/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http://$SERVER/api/projects/attackerProject/members/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.","fixed_in":["4.1.5"],"id":"GHSA-67j9-c52g-w2q9","link":"https://osv.dev/vulnerability/GHSA-67j9-c52g-w2q9","source":"osv","summary":null,"withdrawn":null}]},"4.1.5":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: Implementation :: CPython","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/4.1.5/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"4.1.5","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"05b0e6d9575730163d9d31a6c42f8bc789246f802a32fad7023c804f2b113289","md5":"e16a1ac0576513530f830ba1d8169743","sha256":"4c06316347feef3e75760d3f7570369624a64d5780e5103e5ba7cf10fe1d7f5a"},"downloads":-1,"filename":"ihatemoney-4.1.5.tar.gz","has_sig":false,"md5_digest":"e16a1ac0576513530f830ba1d8169743","packagetype":"sdist","python_version":"source","requires_python":null,"size":366345,"upload_time":"2020-07-26T19:25:37","upload_time_iso_8601":"2020-07-26T19:25:37.242908Z","url":"https://files.pythonhosted.org/packages/05/b0/e6d9575730163d9d31a6c42f8bc789246f802a32fad7023c804f2b113289/ihatemoney-4.1.5.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"5.0.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/5.0.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"5.0.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"0bbc6db81cef517731028fe8762db4f78e9dd021fbf817c510a8723add75d5fb","md5":"fe5244dfe2d6a02879d5c6b5a0398c73","sha256":"a6eaf2e496f30f9afd27c8ac06a186367956b79414b7c6404b2d23c58390af66"},"downloads":-1,"filename":"ihatemoney-5.0.0.tar.gz","has_sig":false,"md5_digest":"fe5244dfe2d6a02879d5c6b5a0398c73","packagetype":"sdist","python_version":"source","requires_python":null,"size":762309,"upload_time":"2021-10-19T20:53:34","upload_time_iso_8601":"2021-10-19T20:53:34.692101Z","url":"https://files.pythonhosted.org/packages/0b/bc/6db81cef517731028fe8762db4f78e9dd021fbf817c510a8723add75d5fb/ihatemoney-5.0.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"5.0.1":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/5.0.1/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"5.0.1","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"728cfbf6208666d73b65cb01418a37d43cb85cd91be0b6786dd83c20926e65b8","md5":"c308e257ad416f55bdb8b00352370286","sha256":"3d56a80fdd9248c61375ecb280be18d5696ca9931cd15bf817c18fb2246d9095"},"downloads":-1,"filename":"ihatemoney-5.0.1.tar.gz","has_sig":false,"md5_digest":"c308e257ad416f55bdb8b00352370286","packagetype":"sdist","python_version":"source","requires_python":null,"size":5666233,"upload_time":"2021-10-19T22:58:22","upload_time_iso_8601":"2021-10-19T22:58:22.201417Z","url":"https://files.pythonhosted.org/packages/72/8c/fbf6208666d73b65cb01418a37d43cb85cd91be0b6786dd83c20926e65b8/ihatemoney-5.0.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"5.1.1":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":"","project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/5.1.1/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"5.1.1","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"28fe217f12935fc1d74c3e85693796044844a8836dcb155d344f168adb55d759","md5":"450a0cea9a4956bc7f1c08464b8f2e5c","sha256":"a66b929696b36a0d6dabaf1ac6e024765de2a18a1723ed5dbd2de885935a583f"},"downloads":-1,"filename":"ihatemoney-5.1.1.tar.gz","has_sig":false,"md5_digest":"450a0cea9a4956bc7f1c08464b8f2e5c","packagetype":"sdist","python_version":"source","requires_python":null,"size":2146846,"upload_time":"2021-10-26T21:58:47","upload_time_iso_8601":"2021-10-26T21:58:47.818349Z","url":"https://files.pythonhosted.org/packages/28/fe/217f12935fc1d74c3e85693796044844a8836dcb155d344f168adb55d759/ihatemoney-5.1.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"5.2.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/5.2.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"5.2.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"1ec3ffff086995c40c87756264fabdb4a64ddc7feb19d0d1678ab262ee36f3ad","md5":"0260839a04f54242783dc72850b91d01","sha256":"b9081905ba6aa9b6581e947e1b01d65f473b762dab56f133d233d163af819244"},"downloads":-1,"filename":"ihatemoney-5.2.0.tar.gz","has_sig":false,"md5_digest":"0260839a04f54242783dc72850b91d01","packagetype":"sdist","python_version":"source","requires_python":null,"size":1546990,"upload_time":"2022-04-07T19:31:00","upload_time_iso_8601":"2022-04-07T19:31:00.233217Z","url":"https://files.pythonhosted.org/packages/1e/c3/ffff086995c40c87756264fabdb4a64ddc7feb19d0d1678ab262ee36f3ad/ihatemoney-5.2.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.0.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.0.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"6.0.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"efaea81d68d75211420bb5be0c42f3b06dff1f05dd21fa7cf593944de7c9b47c","md5":"05c4398febac241bb942d1e337757b3e","sha256":"45c951db99e7f8c9a94e7a786346c3083b76ea288d901c000ea33fbb02321cde"},"downloads":-1,"filename":"ihatemoney-6.0.0.tar.gz","has_sig":false,"md5_digest":"05c4398febac241bb942d1e337757b3e","packagetype":"sdist","python_version":"source","requires_python":null,"size":1607869,"upload_time":"2023-07-13T14:15:58","upload_time_iso_8601":"2023-07-13T14:15:58.769878Z","url":"https://files.pythonhosted.org/packages/ef/ae/a81d68d75211420bb5be0c42f3b06dff1f05dd21fa7cf593944de7c9b47c/ihatemoney-6.0.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.0.1":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.0.1/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"6.0.1","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"cda287aed491407e644921b04d21b3d9c0935395f244402b5b3d62ecf7c46033","md5":"037532e28d7912252e1ac7bba5402f34","sha256":"6e877f71714e21585874d90664eddeac94d99341d5410ad5dc8d82b652d02ff7"},"downloads":-1,"filename":"ihatemoney-6.0.1.tar.gz","has_sig":false,"md5_digest":"037532e28d7912252e1ac7bba5402f34","packagetype":"sdist","python_version":"source","requires_python":null,"size":1604153,"upload_time":"2023-07-22T18:02:42","upload_time_iso_8601":"2023-07-22T18:02:42.617324Z","url":"https://files.pythonhosted.org/packages/cd/a2/87aed491407e644921b04d21b3d9c0935395f244402b5b3d62ecf7c46033/ihatemoney-6.0.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.1.0":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.1.0/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"6.1.0","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"92926f822013301e9213fd9623846c0346e391838b962836312481fe674867f4","md5":"bda7d4a2a3b9510d19435f1dd1fb6f89","sha256":"c37117f1df703a4e72619439b6c5e19867eb867bf72452d4c18612f3b067dea7"},"downloads":-1,"filename":"ihatemoney-6.1.0.tar.gz","has_sig":false,"md5_digest":"bda7d4a2a3b9510d19435f1dd1fb6f89","packagetype":"sdist","python_version":"source","requires_python":null,"size":1622537,"upload_time":"2023-07-29T13:09:34","upload_time_iso_8601":"2023-07-29T13:09:34.445702Z","url":"https://files.pythonhosted.org/packages/92/92/6f822013301e9213fd9623846c0346e391838b962836312481fe674867f4/ihatemoney-6.1.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.1.1":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.1.1/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"6.1.1","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"73df20a2309ba046c1f36fcb8546fe37050faddf4d67ec6597fc13a658fba6ef","md5":"e1835d05ff22671531d6ad38a9376464","sha256":"20c9497222c4f7774d96ed6cd1f6d214978a1c038c0a48f57772547ca29f7462"},"downloads":-1,"filename":"ihatemoney-6.1.1.tar.gz","has_sig":false,"md5_digest":"e1835d05ff22671531d6ad38a9376464","packagetype":"sdist","python_version":"source","requires_python":null,"size":1642506,"upload_time":"2023-10-03T22:16:53","upload_time_iso_8601":"2023-10-03T22:16:53.087537Z","url":"https://files.pythonhosted.org/packages/73/df/20a2309ba046c1f36fcb8546fe37050faddf4d67ec6597fc13a658fba6ef/ihatemoney-6.1.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.1.2":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.1.2/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"6.1.2","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"14d5dc1e3664157a57050a663f88548753f0cea6f1377c5f1cf348a636640ba5","md5":"dadade15d9677928fae1af93290cbf43","sha256":"b4aac270378778e719e9aa0451e374625d2f125b4da95aa03e9517fb4491bb67"},"downloads":-1,"filename":"ihatemoney-6.1.2.tar.gz","has_sig":false,"md5_digest":"dadade15d9677928fae1af93290cbf43","packagetype":"sdist","python_version":"source","requires_python":null,"size":1643083,"upload_time":"2023-11-19T09:54:37","upload_time_iso_8601":"2023-11-19T09:54:37.424848Z","url":"https://files.pythonhosted.org/packages/14/d5/dc1e3664157a57050a663f88548753f0cea6f1377c5f1cf348a636640ba5/ihatemoney-6.1.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.1.3":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.1.3/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"6.1.3","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"27ad2ee753a911e4d1e43dbe3829fe57ac16e1e645179625ae5246cd5ff38ba4","md5":"028b4f44073ba5690d0ed54fae19af49","sha256":"e9e1ce2d46d6b89c24b217a83e3acce3593cb0e34a4d0b2ba063b05f22adb5f8"},"downloads":-1,"filename":"ihatemoney-6.1.3.tar.gz","has_sig":false,"md5_digest":"028b4f44073ba5690d0ed54fae19af49","packagetype":"sdist","python_version":"source","requires_python":null,"size":1643297,"upload_time":"2023-11-23T07:23:04","upload_time_iso_8601":"2023-11-23T07:23:04.129502Z","url":"https://files.pythonhosted.org/packages/27/ad/2ee753a911e4d1e43dbe3829fe57ac16e1e645179625ae5246cd5ff38ba4/ihatemoney-6.1.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.1.4":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web,budget","license":"Custom BSD Beerware","maintainer":"","maintainer_email":"","name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.1.4/","requires_dist":null,"requires_python":"","summary":"A simple shared budget manager web application.","version":"6.1.4","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"d25bd41743afe2a18591e42d65aac76f0e263547fea6a4a079d5c2fc7ccf2914","md5":"36fb0e3389998a02e0525c4a24ae964a","sha256":"3a9251eeb3c8d59a3e88d914941950609f9853493be54d16ee6eb78e3d14e37d"},"downloads":-1,"filename":"ihatemoney-6.1.4.tar.gz","has_sig":false,"md5_digest":"36fb0e3389998a02e0525c4a24ae964a","packagetype":"sdist","python_version":"source","requires_python":null,"size":1662867,"upload_time":"2023-12-14T01:12:25","upload_time_iso_8601":"2023-12-14T01:12:25.656738Z","url":"https://files.pythonhosted.org/packages/d2/5b/d41743afe2a18591e42d65aac76f0e263547fea6a4a079d5c2fc7ccf2914/ihatemoney-6.1.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"6.1.5":{"info":{"author":"Alexis Métaireau & contributors","author_email":"alexis@notmyidea.org","bugtrack_url":null,"classifiers":["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: WSGI :: Application"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/spiral-project/ihatemoney","keywords":"web, budget","license":"Custom BSD Beerware","maintainer":null,"maintainer_email":null,"name":"ihatemoney","package_url":"https://pypi.org/project/ihatemoney/","platform":null,"project_url":"https://pypi.org/project/ihatemoney/","project_urls":{"Homepage":"https://github.com/spiral-project/ihatemoney"},"provides_extra":null,"release_url":"https://pypi.org/project/ihatemoney/6.1.5/","requires_dist":null,"requires_python":null,"summary":"A simple shared budget manager web application.","version":"6.1.5","yanked":false,"yanked_reason":null},"last_serial":22397670,"urls":[{"comment_text":"","digests":{"blake2b_256":"a85873e9cc517dc7bffdaea9ff89c2e39de47e5fa41b6bf6be52f65dced5f26d","md5":"9e69c3310ba4922756f276db7538895a","sha256":"32f5234892af6909a0f4b40da01a0b0af2f16497a335305cdf380f8e3b26eed7"},"downloads":-1,"filename":"ihatemoney-6.1.5.tar.gz","has_sig":false,"md5_digest":"9e69c3310ba4922756f276db7538895a","packagetype":"sdist","python_version":"source","requires_python":null,"size":1671534,"upload_time":"2024-03-19T22:52:25","upload_time_iso_8601":"2024-03-19T22:52:25.537772Z","url":"https://files.pythonhosted.org/packages/a8/58/73e9cc517dc7bffdaea9ff89c2e39de47e5fa41b6bf6be52f65dced5f26d/ihatemoney-6.1.5.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}}